[{"categories":null,"contents":"Enquanto preparava um projecto QGIS para leitura da estrutura de base de dados descrita nas novas Normas e Especificações Técnicas de Cartografia , comecei a configurar os formulários de edição das várias camadas de forma a:\n 1. Bloquear a edição de campos só de leitura, como por exemplo um identificador. 2. Configurar widgets adequados aos campos, que facilitem a vida do utilizador e evitem que cometa erros, como por exemplo campos com dadas e listas de valores fixos.  No fundo, o que procurava era qualquer coisa deste género:\nAntes de mais, é preciso dizer que o QGIS, quando lê uma tabela PostGreSQL/PostGIS, já faz um excelente trabalho a adivinhar, para cada campo, o tipo de widget a usar, assim como as constraints a aplicar. O que é uma enorme ajuda. No entanto, alguns campos precisam de uma configuração extra.\nSe se tratassem de meia-dúzia de camadas e campos, teria feito tudo de manualmente, mas ao fim da quinta camada, o meu Mantra começou a chamar por mim:\n\"Quando usas um computador, se estás a fazer manualmente uma tarefa repetitiva, estás a fazê-la mal!\" Então, comecei a pensar como poderia fazer esta configuração de forma mais sistemática para todas as camadas e campos, sem me causar tendinites. Depois de alguma pesquisa, cheguei às funções PyQGIS que apresento a seguir.\nTornar um campo apenas de leitura O campo identificador é gerado automaticamente pela base de dados, pelo que o utilizador não só não precisa de o editar, como não deve. Por essa razão, convém tornar o campo não editável.\nPara o fazer programaticamente recorri ao seguinte código.\ndef field_readonly(layer, fieldname, option = True): fields = layer.fields() field_idx = fields.indexOf(fieldname) if field_idx \u0026gt;= 0: form_config = layer.editFormConfig() form_config.setReadOnly(field_idx, option) layer.setEditFormConfig(form_config) # Exemplo para o campo \u0026quot;identificador\u0026quot; project = QgsProject.instance() layers = project.mapLayers() for layer in layers.values(): field_readonly(layer,'identificador')  Configurar um campo com o widget DateTime Os campos de datas ficam configurados automaticamente, mas o widget usado por omissão, ao contrário do que é exigido pela norma, apenas guarda a data e não a data e hora. Para além disso, para o meu caso posso preencher o campo da data com a data e hora actuais, para evitar ter de o fazer de forma manual.\nComecei por configurar como queria um campo de exemplo e depois fui ver como a configuração era gravada em PyQGIS usando a consola python:\n\u0026gt;\u0026gt;\u0026gt;layer = iface.mapCanvas().currentLayer() \u0026gt;\u0026gt;\u0026gt;layer.fields().indexOf('inicio_objeto') 1 \u0026gt;\u0026gt;\u0026gt;field = layer.fields()[1] \u0026gt;\u0026gt;\u0026gt;field.editorWidgetSetup().type() 'DateTime' \u0026gt;\u0026gt;\u0026gt;field.editorWidgetSetup().config() {'allow_null': True, 'calendar_popup': True, 'display_format': 'yyyy-MM-dd HH:mm:ss', 'field_format': 'yyyy-MM-dd HH:mm:ss', 'field_iso_format': False}  Com isso consegui criar uma função que me permitisse configurar qualquer campo com a mesma configuração.\nACTUALIZAÇÃO: Como extra, usei a função now() como default para quando um novo elemento é criado.\ndef field_to_datetime(layer, fieldname): config = {'allow_null': True, 'calendar_popup': True, 'display_format': 'yyyy-MM-dd HH:mm:ss', 'field_format': 'yyyy-MM-dd HH:mm:ss', 'field_iso_format': False} type = 'Datetime' fields = layer.fields() field_idx = fields.indexOf(fieldname) if field_idx \u0026gt;= 0: widget_setup = QgsEditorWidgetSetup(type,config) layer.setEditorWidgetSetup(field_idx, widget_setup) layer.setDefaultValueDefinition(field_idx, QgsDefaultValue('now()')) # Exemplo para os campos \u0026quot;inicio_objeto\u0026quot; e \u0026quot;fim_objeto\u0026quot; for layer in layers.values(): field_to_datetime(layer,'inicio_objeto')  Configurar um campo com o widget Value Relation No modelo de dados, muitas tabelas contém campos que apenas aceitam um conjunto finito de valores. Valores estes que são listados noutra tabela, os chamados Foreign keys.\nPara estes casos, é conveniente no QGIS configurar um widget de relação de tabela. Para o fazer de forma programática, o processo é identico ao mostrado anteriormente, em que há que descobrir primeiro o tipo e a configuração de uma campo já preparado. Mas neste caso, cada campo terá uma configuração ligeiramente diferente.\nFelizmente, quem desenhou a estrutura de dados facilitou-nos a vida ao dar o mesmo nome aos campos e às tabela de valores associada, e todos eles começados com a texto \u0026ldquo;valor_\u0026rdquo;, tornando possivel que também essa parte seja automática.\nA funçao abaixo começa por identificar para determinada camada todos os campos cujo nome começa por \u0026ldquo;valor_\u0026rdquo;. Depois iterando sobre os campos encontrados, adapta a configuração de forma a usar como camada de referência (\u0026lsquo;Layer\u0026rsquo;) a camada com o mesmo nome que o campo.\ndef field_to_value_relation(layer): fields = layer.fields() pattern = re.compile(r'^valor_') fields_valor = [field for field in fields if pattern.match(field.name())] if len(fields_valor) \u0026gt; 0: config = {'AllowMulti': False, 'AllowNull': True, 'FilterExpression': '', 'Key': 'identificador', 'Layer': '', 'NofColumns': 1, 'OrderByValue': False, 'UseCompleter': False, 'Value': 'descricao'} for field in fields_valor: field_idx = fields.indexOf(field.name()) if field_idx \u0026gt;= 0: print(field) try: target_layer = QgsProject.instance().mapLayersByName(field.name())[0] config['Layer'] = target_layer.id() widget_setup = QgsEditorWidgetSetup('ValueRelation',config) layer.setEditorWidgetSetup(field_idx, widget_setup) except: pass else: return False else: return False return True # Correr função em todas as camadas for layer in layers.values(): field_to_value_relation(layer)  Conclusão Assim, de forma relativamente rápida, consegui configurar todas as camadas do projecto com os widgets que queria.\nPode consultar o código completo aqui\nEsta é a ponta do iceberg. Havendo necessidade, com um pouco de paciência e pesquisa, outras configurações podem ser alteradas usando PyQGIS. Por isso, pense nisso antes de começar a configurar camada a camada, campo a campo.\n","date":"September 30, 2019","hero":"/images/posts_hero/form_widget_pyqgis.png","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2019-09-30-norma-cartografica-no-qgis-alterar-formularios-de-edicao-com-pyqgis/","summary":"Enquanto preparava um projecto QGIS para leitura da estrutura de base de dados descrita nas novas Normas e Especificações Técnicas de Cartografia , comecei a configurar os formulários de edição das várias camadas de forma a:\n 1. Bloquear a edição de campos só de leitura, como por exemplo um identificador. 2. Configurar widgets adequados aos campos, que facilitem a vida do utilizador e evitem que cometa erros, como por exemplo campos com dadas e listas de valores fixos.","tags":["pyqgis","QGIS","Recart"],"title":"Norma Cartográfica no QGIS - Alterar formulários de edição com PyQGIS"},{"categories":null,"contents":"(aka Funcionalidades que os utilizadores de ArcGIS Desktop nem sonham que existem) De tempos a tempos, leio artigos de comparação entre o ArcGIS e o QGIS. Uma vez que partem geralmente do ponto de vista de utilizadores de ArcGIS, acabam invariavelmente em observações parciais sobre a falta de funcionalidades do QGIS. Está na hora de mudar o ponto de vista. Por isso, convido-vos a acompanharem-me neste artigo (um pouco) longo, totalmente e assumidamente parcial.\n\"Olá, o meu nome é Alexandre, e tenho usado... [QGIS](http://www.qgis.org)\" Eis algo que eu diria numa sessão de terapia em grupo dos Utilizadores Anónimos do QGIS. Estou a precisar de ir a uma sessão dessas porque, tendo sido recentemente forçado a voltar a usar - de forma temporária - o ArcGIS, sinto muita muita muita falta do QGIS em vários aspectos.\nEm tempos idos, houve alturas em que usava o ArcGIS diariamente. Usei-o até à versão 9.3.1, até que me decidi a mudar para o QGIS (versão 1.7.4, acho eu). Na altura, senti falta de algumas (muitas?) funcionalidades do ArcGIS, mas estava disposto a trocá-las pela liberdade oferecida pela filosofia Open Source. Desde essa altura, passou-se muita coisa no universo QGIS, e eu tenho-me mantido avidamente atento à sua evolução. Esperaria que o mesmo tivesse acontecido no lado do ArcGIS Desktop, mas, ao que me parece, isso não aconteceu.\nEstou a utilizar o topo de gama da ESRI, o ArcGIS 10.3, licença advanced, e debato-me para conseguir fazer pequenas coisas que são simplesmente inexistentes em ArcGIS. Assim, o que se segue é uma lista de funcionalidades do QGIS das quais sinto falta.\nAviso: Para aqueles que usam exclusivamente o ArcGIS, algumas destas funcionalidades podem apanhá-los de surpresa.\nControlo de transparência \"O ArcGIS tem transparência! Está no separador _Display_, nas propriedades da camada!\" Sim, é verdade, mas\u0026hellip; apenas é possível configurar transparência ao nível da camada. Ou seja, ou é tudo transparente, ou não é nada\u0026hellip;\nNo QGIS, é possível determinar a transparência ao nível da camada, ao nível do elemento/símbolo, e ao nível da cor. Podem achar que estou a sobrevalorizar o assunto, mas vejam a diferença nas imagens abaixo.\nReparem que no QGIS é possível controlar a transparência sempre (ou quase sempre) que se define uma cor. Isto inclui em anotações (como as usadas nas imagens acima), em etiquetas, e em itens do compositor de impressão. É até possível determinar a transparência de uma cor usando a função RGBA() numa expressão! Que mais se pode pedir? :-)\nModos de Blending Esta funcionalidade é uma das preciosidades do QGIS, a possibilidade de combinar camadas como faríamos na maioria dos software de edição de imagem. Ao nível da camada e/ou elemento, é possível controlar como o mesmo irá interagir com os elementos e camadas abaixo. Para além do modo normal, estão disponíveis mais 12 modos: Lighen, Screen, Dodge, Darken, Multiply, Burn, Overlay, Soft light, Hard light, Difference and Subtract. Não me vou alongar sobre as propriedade de cada um. Vejam esta página para se informarem acerca da matemática por detrás de cada um deles e alguns exemplos.\nSem se experimentar um pouco, não é fácil perceber em que é que esta funcionalidade nos pode ser útil à produção cartográfica. Eu tive a oportunidade de o fazer enquanto tentava responder a esta pergunta.\nUma das mais comuns utilizações para o blending é quando queremos realçar ou simular o relevo adicionando um hillshade por cima das restantes camadas. Em ArcGIS, apenas é possível controlar a transparência da camada, e o resultado final fica sempre um pouco esbatido em relação ao original. Mas no QGIS, é possível manter a força das cores originais usando o modo multiply na camada do hillshade.\n[caption id=\u0026ldquo;attachment_1809\u0026rdquo; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;1269\u0026rdquo;]Hipsometria com as cores originais[/caption]\n[caption id=\u0026ldquo;attachment_1806\u0026rdquo; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;1269\u0026rdquo;]Cores da hipsometria esbatidas pelo hillshade transparente[/caption]\n[caption id=\u0026ldquo;attachment_1805\u0026rdquo; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;1269\u0026rdquo;]Cores originais da hipsometria com o hillshade usando o multiply do QGIS[/caption]\nÉ também possível usar os modos de blending em elementos do compositor de mapas, permitindo combiná-los com outros elementos e texturas. Isto dá-nos a oportunidade de obter resultados mais \u0026ldquo;artísticos\u0026rdquo; sem a necessidade de pós-processamento num software de edição de imagem.\nConfiguração de cores O eficiente controlo das cores é algo essencial para um cartógrafo, e o QGIS permite-nos controlá-las como profissionais que somos. É possível escolher as cores usando diferentes menus. Menus que poderá reconhecer de software como o Inkscape, Photoshop, Gimp, etc\u0026hellip;\n[gallery ids=\u0026ldquo;991,988,989\u0026rdquo; type=\u0026ldquo;rectangular\u0026rdquo;]\nO meu favorito é o color picker. Ora vejam, usando o color picker, é possível recolhermos cores de qualquer sítio do nosso ecrã, fora ou dentro do QGIS. Algo muito útil e produtivo quando queremos usar uma cor já existente no nosso mapa, da legenda, de uma palete do COLOURlovers ou do logo de uma empresa.\n[caption id=\u0026ldquo;attachment_1571\u0026rdquo; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;862\u0026rdquo;]Recollhendo uma cor fora do QGIS[/caption]\nTambém podemos fazer copy/paste de cores entre menus, gravar e importar paletes de cores e até dar nome a uma cor e usá-la numa variável. Com tudo isto disponível, é-me difícil engolir o menu de selecção de cores do Windows. :(\n[gallery ids=\u0026ldquo;992,990\u0026rdquo; type=\u0026ldquo;columns\u0026rdquo;]\n[gallery ids=\u0026quot;1555,1554\u0026quot; type=\u0026quot;rectangular\u0026quot; orderby=\u0026quot;rand\u0026quot;]\nModos \u0026ldquo;avançados\u0026rdquo; de simbologia de vectores No ArcGIS, existem várias maneiras de simbolizar as camadas de vectores. Temos Single symbol, Unique values, Unique values many fields\u0026hellip; e por aí fora. À primeira impressão, pode até parecer que ao QGIS faltam alguns destes modos, mas acreditem em mim, não faltam! Na verdade, o QGIS oferece muito mais flexibilidade no que toca a simbolizar as suas camadas.\nPara começar, pode-se usar tanto \u0026lsquo;campos\u0026rsquo; como \u0026lsquo;expressões\u0026rsquo; em qualquer um dos modos de simbologia, enquanto que no ArcGIS apenas é possível usar \u0026lsquo;campos\u0026rsquo;. Alimentado por centenas de funções e com a possibilidade de criarmos as nossas próprias funções usando Python, o que é possível conseguir-se com expressões não tem limites. Torna-se possível seleccionar, recalcular, normalizar (etc\u0026hellip;) um número infinito de campos para criar os nossos próprios \u0026ldquo;valores\u0026rdquo; (sem falar de que é possível aprimorar as etiquetas associadas aos valores para criar a legenda ideal).\n[caption id=\u0026ldquo;attachment_1580\u0026rdquo; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;825\u0026rdquo;]Símbolos graduados no QGIS usando uma expressão para calcular a densidade populacional[/caption]\nE depois, no QGIS existem alguns modos \u0026ldquo;especiais\u0026rdquo; (e de certa forma bastante específicos) de simbologia, que nos fazem exclamar \u0026ldquo;wooooh\u0026rdquo;. Como, por exemplo, os polígonos invertidos, que permitem preencher o exterior dos polígonos (bom para mascarar outros elementos, os pontos desfasados, para mostrar pontos fisicamente demasiado próximos para serem representados, e o Heatmap que transforma qualquer camada de pontos num heatmap sem necessidade de conversão para raster e que é automaticamente actualizado sempre que editamos a camada de pontos.\n[caption id=\u0026ldquo;attachment_1583\u0026rdquo; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;777\u0026rdquo;]Polígonos invertidos a mascarar o exterior de uma área de interesse[/caption]\nMas deixei o melhor para o fim. O \u0026ldquo;One Renderer to rule them all\u0026rdquo;, a simbologia baseada em regras. Com este modo, é possível adicionar várias regras, agrupá-las numa estrutura de árvore, e atribuir-lhes um símbolo distinto. Cada elemento irá ser representado consoante cumpre ou não cada uma das regras. Isto dá aos utilizadores de QGIS controlo absoluto sobre a simbologia das suas camadas e que, em conjunto com o editor de expressões e as data-defined properties, abre a porta às mais diversas aplicações (veja alguns exemplos na secção abaixo).\n[caption id=\u0026ldquo;attachment_1589\u0026rdquo; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;869\u0026rdquo;]Simbologia por regras[/caption]\nAtlas Uma das minhas funcionalidade favoritas do QGIS é o Atlas do compositor de impressão. Eu sei que o ArcGIS tem o seu próprio \u0026ldquo;Atlas\u0026rdquo;, as Data Driven Pages, mas sinceramente, não é a mesma coisa.\nPenso que conhecem o funcionamento básico destas ferramentas em ambos os softwares. Cria-se um layout de um mapa, escolhe-se uma camada de vectores como coverage e software irá criar um mapa, devidamente centrado e/ou aproximado para cada elemento da camada. É também possível adicionar etiquetas que irão mudar de acordo com os valores guardados nos atributos da camada.\nMas no QGIS as funcionalidades vão um pouco mais além\u0026hellip;\nBasicamente, podemos usar os atributos e geometria dos elementos da camada onde quer que seja possível usar uma expressão e, no QGIS, as expressões estão por todo o lado. Desta forma, a maioria das propriedades tanto de camadas, como dos elementos do mapa podem ser controlados pela camada usada no atlas.\nCom a devida configuração, iterando por todos os elementos da camada de atlas, é possível escolher os elementos de outras camadas a mostrar ou a esconder, alterar a cor de base do seu mapa, rodar e redimensionar as páginas de acordo com as dimensões do elemento, escolher um logo específico para acompanhar cada mapa, e por aí fora. Mais uma vez, o céu é o limite.\n[caption id=\u0026ldquo;attachment_535\u0026rdquo; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;506\u0026rdquo;]Série de mapas cuja dimensão foi automaticamente alterada para cobrir os elementos a uma escala fixa[/caption]\nPor isso, se se aliar a funcionalidade de Atlas com as data-defined properties, a simbologia por regras e as expressões, não me parece que o Data Driven Pages do ArcGIS seja um rival à altura. Discordam? Então tentem responder a esta questão.\n**Dica: **Se realmente quiserem levar a produção de cartografia a outro nível de automatismo, usando bases de dados como Spatialite ou Postgis, é possível criar camadas de coverage adequadas para as vossas necessidades através de views. Acaba-se a redundância e a camada estará sempre actualizada.\nMenus de estilo e etiquetas Este é um caso mais de experiência do utilizador (UX) do que propriamente uma funcionalidade em falta, mas não imaginam como é confortável ter todas as opções das etiquetas e dos estilos em apenas um par de janelas (com vários separadores, claro).\nQuando uso as opções de simbologia do ArcGIS parece que estou no filme \u0026ldquo;A origem (Inception)\u0026rdquo;, às tantas, já nem sei onde estou! Por exemplo, para adicionar um rebordo tracejado a um símbolo de uma camda de polígonos, é preciso abrir 5 janelas diferentes, e depois voltar para trás a clicar OK, OK, OK\u0026hellip;\n[caption id=\u0026ldquo;attachment_1244\u0026rdquo; align=\u0026ldquo;aligncenter\u0026rdquo; width=\u0026ldquo;1499\u0026rdquo;]Opções de símbolos do ArcGIS[/caption]\nNo QGIS, uma vez aberta a janela de propriedades da camada, todas as opções estão a um clique de distância (ou quase). E basta carregar em OK ou Aplicar uma vez para visualizar o resultado!\n[caption id=\u0026ldquo;attachment_1561\u0026rdquo; align=\u0026ldquo;alignnone\u0026rdquo; width=\u0026ldquo;907\u0026rdquo;]Opções de estilos do QGIS[/caption]\nComo bónus, é possível fazer copy/paste de uma camada para a outra, tornando a configuração do estilo de várias camadas muito mais rápida. Ao que me respondem:\n\"Não sejas ridículo! O ArcGIS também permite importar símbolos de outras camadas.\" Símbolos? Sim. Etiquetas? Não! E se, como eu, perdem algum tempo a configurar de forma primorosa as etiquetas de uma camada, ter de fazer o mesmo ou semelhante para outras camadas, vai-vos dar vontade de chorar\u0026hellip; A mim dá.\n(Vou deixar a comparação de múltiplos estilos por camada do QGIS vs Data Frames do ArcGIS para outra altura)\nWFS \"O quê?!!\" Yup, é isso mesmo, o ArcGIS não suporta o standard OGC WFS a não ser que se compre uma extensão extra: A Extensão de Data Interoperability.\nCom o universo SIG (e não só) a evoluir cada vez mais para Dados Abertos, Normas Abertas e Serviços Web OGC, esta situação revela uma posição extremamente mercantil por parte da ESRI. Se fosse um cliente ESRI, sentir-me-ia aldrabado.  Ou talvez não\u0026hellip; talvez me sentisse grato por mais uma oportunidade de investir algum dinheiro nas suas funcionalidades avançadas\u0026hellip;\u0026lt;\\sarcasmo\u0026gt;\nNo QGIS, como tudo o resto, o uso do WFS é livre. Tudo o que é preciso é adicionar um URL para o servidor WFS, e podemos começar a adicionar as camadas disponibilizadas, com a certeza de que estarão devidamente actualizadas pela entidade responsável pelo serviço.\nFelizmente, para os utilizadores ArcGIS menos afortunados, existe sempre a \u0026ldquo;cómoda\u0026rdquo; possibilidade de fazerem o download das camadas através do browser de internet :-P.\nhttp://giswebservices.massgis.state.ma.us/geoserver/wfs?request=GetFeature\u0026amp;service=wfs\u0026amp;version=1.0.0\u0026amp;typename=massgis:GISDATA.TOWNS_POLY\u0026amp;outputformat=SHAPE-ZIP  Ou então podem sempre usar o QGIS (ou outro open soure qualquer) para fazer o download. Mas não se esqueçam que as camadas não se irão actualizar sozinhas.\nEditor de expressões Já fiz menção às expressões várias vezes, mas para aqueles que desconhecem o editor de expressões, decidi terminar este artigo com umas das minhas funcionalidades favoritas.\nNão conheço o suficiente do editor de expressões do ArcGIS para o poder criticar. Tanto quando percebo, podemos usá-lo para criar labels e para preencher um campo usando o field calculator. Sei que existem certamente muitas funções que podemos usar (apenas utilizei algumas) mas não são visíveis ao utilizador comum. Provavelmente é preciso consultar a documentação de ajuda para conhecê-las todas. É ainda possível criar funções em VBScript, Python e JsScript.\nNo QGIS, como já referi, podem-se usar expressões praticamente em todo o lado, o que é bastante conveniente para muitas aplicações. No que toca a funções, existem centenas disponíveis directamente na janela do editor de expressões, todas devidamente acompanhadas por informação sobre a sua sintaxe e alguns exemplos ilustrativos. Também se podem usar campos e valores como no ArcGIS, e até existe uma secção de \u0026ldquo;expressões recentes\u0026rdquo; para quando precisamos de reutilizar uma expressão.\nPara além disso, também é possível criar as nossas próprias funções em Python (nada de VBScript ou JsScript), mas desta feita num editor próprio, num outro separador. Um editor equipado com autocomplete e code highlight para nos facilitar a vida, e que permite gravar as funções no ambiente do utilizador para serem usadas posteriormente (inclusive noutras sessões de QGIS).\nConclusão Estas não são certamente as únicas funcionalidades do QGIS de que sinto falta, e não serão certamente as mais limitantes (por exemplo, não poder usar em pleno bases de dados Spatialite e Postgis vai, de certeza, tornar-me a vida num inferno nos próximos tempos), mas são aquelas que identifiquei assim que (re)abri o ArcGIS pelas primeiras vezes.\nPara além disso, sinto que, com a actual dinâmica de desenvolvimento do QGIS, a cada nova versão, esta lista irá crescer muito rapidamente. Embora ainda não tenha experimentado o ArcGIS Pro, na minha opinião, não me parece que a ESRI consiga acompanhar o ritmo.\n\u0026ldquo;Ainda há coisas que sente falta do ArcGIS?\u0026rdquo; Claro que sim. Por exemplo, sinto falta de suporte para CMYK durante a exportação de mapas, mas não tanto como sinto falta do QGIS neste momento. Para além disso, sei que essas lacunas serão resolvidas mais cedo ou mais tarde.\nNo fundo, até gostei da oportunidade de voltar ao ArcGIS, pois permitiu-me reforçar a minha opinião acerca do QGIS. Tem tudo a ver com liberdade! Não só a liberdade de usar o programa quando e para o que bem entender (algo que para mim já era ponto assente), mas também a liberdade de controlar o programa em si e os seus outputs. Mantendo a facilidade de utilização para recém chegados e principiantes, muito foi feito para facilitar a vida de utilizadores experientes, e eles ficam eternamente agradecidos por isso (pelo menos eu fico).\n  Dito isto, The winner is\u0026hellip; QGIS!!\n  O Fim (de um artigo extremamente parcial) ","date":"January 28, 2016","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/opinion/2016-01-28-saudades-do-qgis-enquanto-uso-arcgis/","summary":"(aka Funcionalidades que os utilizadores de ArcGIS Desktop nem sonham que existem) De tempos a tempos, leio artigos de comparação entre o ArcGIS e o QGIS. Uma vez que partem geralmente do ponto de vista de utilizadores de ArcGIS, acabam invariavelmente em observações parciais sobre a falta de funcionalidades do QGIS. Está na hora de mudar o ponto de vista. Por isso, convido-vos a acompanharem-me neste artigo (um pouco) longo, totalmente e assumidamente parcial.","tags":["Opinião","QGIS"],"title":"Saudades do QGIS (enquanto uso ArcGIS)"},{"categories":null,"contents":"Com o lançamento da primeira versão com suporte de longa duração (2.8 LTR) e mais duas versões estáveis (2.10 e 2.12), 2015 foi um ano fantástico (e atarefado) para a comunidade QGIS, com inúmeras melhorias e novas funcionalidades a chegarem ao QGIS.\nEm jeitos de balanço, pedi aos utilizadores que escolhessem as funcionalidades introduzidas em 2015 suas favoritas (da lista do registo visual de alterações). Como resultado, obtive o seguinte top 5 de novas funcionalidades.\n5 - Melhorias na consola python (2.8) Com a versão 2.8, passou a ser possível arrastar e largar scripts Python para a janela do QGIS, sendo os mesmos executados automaticamente. Existe também um novo ícone na barra de ferramentas dos módulos e um atalho (Ctrl-Alt-P) para acesso rápido à consola Python.\n4 - Novos algoritmos de processamento (2.8) Também no 2.8, foram introduzidos novos algoritmos à framework de processamento. Se trabalha em análise espacial, estas adições poderão muito bem ter-lhe feito ganhar o dia (ou o ano).\n * Algoritmo** Pontos regulares** * Algoritmo** Diferença simétrica** * Algoritmo** Separação de vectores** * Algoritmo** Grelha de vectores** * Algoritmo de** cálculo de curvas hipsométricas** * Algoritmo** Separar linhas com linhas** * Reconstrução do algoritmo de** manipulação de campos**  3 - Simbolizar por regras em árvore na legenda (2.8) Ao longo de 2015 foram feitas algumas melhorias à legenda do QGIS. A versão 2.8 trouxe-nos a visualização da legenda de camadas simbolizadas por regras em formato de árvore. Melhor que isso, cada nó da estrutura de árvore pode ser ligada ou desligada, possibilitando uma excelente flexibilidade na escolha de sub-camadas a desenhar no mapa.\n2 - Ferramentas avançadas de edição (2.8) Alguma vez desejou, no QGIS, desenhar linhas paralelas ou com ângulos rectos, trancar as linhas a determinados ângulos ou distâncias e por aí a fora? Então as suas preces foram ouvidas. As ferramentas avançadas de edição começaram como módulo CADinput e foram integradas no QGIS na versão 2.8, adicionando-lhe mais um painel. O painel fica activo quando se procede ao desenho de geometrias.\n1 - Etiquetas por regras (2.12) Esta era uma funcionalidade há muito esperada (pelo menos por mim), e foi votada pela maioria dos utilizadores. A partir da versão 2.12, é possível definir estilos de etiquetas com base em regras. Isto permite um ainda maior controlo sobre o posicionamento e estilo das etiquetas. Tal como no caso das camadas simbolizadas por regras, as regras das etiquetas podem ser agrupadas para permitir a definição das opções de estilo de uma forma extremamente fléxivel. Por exemplo, é possível desenhar etiquetas diferentes consoante o tamanho dos respectivos elementos (tal como é exemplificado na imagem).\nHouve outras funcionalidades a fazerem as delícias de muitos utilizadores. Por exemplo, as Melhorias/consistência na selecção de projecções (2.8), Melhorias no provider PostGIS (2.12), Módulo para validar geometrias e alinhar geometrias (2.12), Múltiplos estilos por camada (2.8).\nDiscorda desta lista? Então ainda vai a tempo de fazer valer o seu voto. Também pode consultar aqui os resultados na integra.\nObviamente, esta lista vale o que vale. Tratou-se de um mero exercício. Até porque, com a tamanha diversidade de utilizadores QGIS, seria impossível criar uma lista que nos agradasse a todos. Para além disso, houve muitos aperfeiçoamento, feitos em 2015, que poderão ter passado despercebidos à maioria dos utilizadores. Consulte o registo visual de alterações para ver a lista completa de funcionalidades e melhorias.\nEm meu nome, a todos os programadores, patrocinadores e colaboradores do QGIS,\nMUITO OBRIGADO PELO VOSSO FANTÁSTICO TRABALHO!I desejo-vos um óptimo (e produtivo) 2016. ","date":"January 2, 2016","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/news/2016-01-01-qgis-top-features-2015/","summary":"Com o lançamento da primeira versão com suporte de longa duração (2.8 LTR) e mais duas versões estáveis (2.10 e 2.12), 2015 foi um ano fantástico (e atarefado) para a comunidade QGIS, com inúmeras melhorias e novas funcionalidades a chegarem ao QGIS.\nEm jeitos de balanço, pedi aos utilizadores que escolhessem as funcionalidades introduzidas em 2015 suas favoritas (da lista do registo visual de alterações). Como resultado, obtive o seguinte top 5 de novas funcionalidades.","tags":["QGIS"],"title":"Top Novas Funcionalidades do QGIS em 2015"},{"categories":null,"contents":"Hoje precisei criar uma view em PostGIS que me devolvesse os vértices de uma camada de multipolígonos. Para além disso, precisava que os mesmos viessem ordenados numericamente começando em 1, e com as respectivas coordenadas XY.\n\nA tarefa parecia-me trivial – bastaria usar a função ST_DumpPoints() para obter os vértices – não fosse o facto dos polígonos em postGIS terem um vértice repetido (obrigatoriamente o último vértice tem de ser igual primeiro) que não me interessava mostrar.\nDepois de algumas tentativas, cheguei à seguinte query:\n[code language=\u0026ldquo;SQL\u0026rdquo;] CREATE OR REPLACE VIEW public.my_polygon_vertexes AS WITH t AS \u0026ndash; Transformar os polígonos em sets de pontos (SELECT id_polygon, st_dumppoints(geom) AS dump FROM public.my_polygons), f AS \u0026ndash; Tirar geometria e indices dos sets de pontos (SELECT t.id_polygon, (t.dump).path[1] AS part, (t.dump).path[3] AS vertex, (t.dump).geom AS geom FROM t) \u0026ndash; Obter todos os pontos filtrando o último ponto de cada parte das geometrias SELECT row_number() OVER () AS gid, \u0026ndash; Criar um identificador único f.id_polygon, f.part, f.vertex, ST_X(f.geom) as x, \u0026ndash; extra: obter a coordenada X do ponto ST_Y(f.geom) as y, \u0026ndash; extra: obter a coordenada Y do ponto f.geom::geometry(\u0026lsquo;POINT\u0026rsquo;,4326) as geom \u0026ndash; garantir o tipo de geometria FROM f WHERE (f.id_polygon, f.part, f.vertex) NOT IN (SELECT f.id_polygon, f.part, max(f.vertex) AS max FROM f GROUP BY f.id_polygon, f.part); [/code]\nA parte interessante ocorre na cláusula WHERE, basicamente, da listagem total de vértices, são escolhidos apenas os que não se encontram numa lista de vértices com o valor de índice máximo do vértice por polígono e por parte, ou seja, o último vértice que cada parte de cada polígono.\nEis o resultado:\n\nA vantagem desta abordagem (via PostGIS) em vez de usar a ferramenta \u0026ldquo;Polígonos para linhas\u0026rdquo;, seguida de \u0026ldquo;Linhas para Ponto\u0026rdquo; é que basta alterar a minha camada de polígonos, e gravá-la, para ver os vértices a serem actualizados automaticamente. É nestas coisas que adoro o Postgis.\n","date":"November 6, 2015","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2015-11-06-obter-os-vertices-de-multipoligonos-em-postgis/","summary":"Hoje precisei criar uma view em PostGIS que me devolvesse os vértices de uma camada de multipolígonos. Para além disso, precisava que os mesmos viessem ordenados numericamente começando em 1, e com as respectivas coordenadas XY.\n\nA tarefa parecia-me trivial – bastaria usar a função ST_DumpPoints() para obter os vértices – não fosse o facto dos polígonos em postGIS terem um vértice repetido (obrigatoriamente o último vértice tem de ser igual primeiro) que não me interessava mostrar.","tags":["Postgis"],"title":"Obter os vértices de multipolígonos usando PostGIS"},{"categories":null,"contents":"De quando em vez aparecem-me zonas com demasiado símbolos no mesmo local, e pensei como seria fantástico se os pudesse arrastar para um local mais conveniente sem ter de alterar as suas geometrias, tal como é possível fazer com as etiquetas. Esse pensamento deu-me a ideia base para a dica que vou demonstrar.\nEscolha a sua camada de pontos e comece por criar dois novos campos chamados symbX e symbY (Tipo: Decimal; Tamanho: 20; precisão: 5). No separador \u0026ldquo;Estilo\u0026rdquo; das propriedades da camada, defina para cada nível do seu símbolo o seguinte: Escolher \u0026ldquo;unidade do mapa\u0026rdquo; como a unidade para as opções de afastamento; Usar a seguinte expressão na opção afastamento das propriedades definidas por dados.\n[code]\nCASE WHEN symbX IS NOT NULL AND symbY IS NOT NULL THEN tostring($x - symbX) + \u0026lsquo;,\u0026rsquo; + tostring($y - symbY) ELSE \u0026lsquo;0,0\u0026rsquo; END\n[/code]\n\nTenha atenção que, se as coordenadas do seu mapa tiver valores negativos, será necessário uma pequena alteração ao código. E. g., se tiver valores negativos em X deverá usar-se antes a expressão \u0026ldquo;tostring(symbX -$x)\u0026rdquo;.\nDe forma temporária coloque etiquetas na sua camada usando um texto pequeno (eu usei o \u0026lsquo;+\u0026rsquo; (sinal de mais) centrado e com um buffer branco) e defina as coordenadas X e Y dos propriedades definidadas por dados usando os campos symbX e symbY,\n\nA partir desse momento, quando usar a ferramenta de mover etiquetas, não só alterará a posição da etiqueta, mas também a do próprio símbolo! Fantástico, não?\n\nNote que as geometria dos elementos não são alteradas durante o processo. Para além disso, lembre-se que neste caso também poderá adicionar linhas de guia para ligar os símbolos à posição original do ponto.\n","date":"February 23, 2015","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2015-02-23-dica-para-ajustar-posicao-de-simbolos-em-qgis-hack-to-adjust-map-symbols-location-in-qgis/","summary":"De quando em vez aparecem-me zonas com demasiado símbolos no mesmo local, e pensei como seria fantástico se os pudesse arrastar para um local mais conveniente sem ter de alterar as suas geometrias, tal como é possível fazer com as etiquetas. Esse pensamento deu-me a ideia base para a dica que vou demonstrar.\nEscolha a sua camada de pontos e comece por criar dois novos campos chamados symbX e symbY (Tipo: Decimal; Tamanho: 20; precisão: 5).","tags":["Cartografia","Dica","QGIS"],"title":"Dica para ajustar posição de símbolos em QGIS"},{"categories":null,"contents":"Tive necessidade de, numa camada de polígonos, adicionar colunas à tabela de atributos com as coordenadas dos centroides das geometria. Cheguei às seguintes expressões para calcular as coordenadas X e Y, respectivamente:\n[code] xmin(centroid($geometry)) ymin(centroid($geometry)) [/code]\nA expressão parece bastante banal, mas ainda demorei a perceber que, não existindo funções x(geometry) e y(geometry), podia usar as funções xmin() e ymin() para obter as coordenadas dos centroides dos polígonos. Uma vez que esta não foi a primeira vez que precisei de usar estas expressões, fica agora o registo para não me voltar a esquecer.\n","date":"February 10, 2015","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2015-02-10-calcular-coordenadas-do-centroide-de-poligonos-calculate-polygon-centroids-coordinates/","summary":"Tive necessidade de, numa camada de polígonos, adicionar colunas à tabela de atributos com as coordenadas dos centroides das geometria. Cheguei às seguintes expressões para calcular as coordenadas X e Y, respectivamente:\n[code] xmin(centroid($geometry)) ymin(centroid($geometry)) [/code]\nA expressão parece bastante banal, mas ainda demorei a perceber que, não existindo funções x(geometry) e y(geometry), podia usar as funções xmin() e ymin() para obter as coordenadas dos centroides dos polígonos. Uma vez que esta não foi a primeira vez que precisei de usar estas expressões, fica agora o registo para não me voltar a esquecer.","tags":null,"title":"Calcular coordenadas do centroide de polígonos"},{"categories":null,"contents":"Recentemente tive necessidade de colocar etiquetas de texto em elementos com geometrias muito próximas, fazendo com que as mesmas colidissem umas com as outras.\nControlando a posição das etiquetas através dos dados (para configurar rapidamente a camada usei o plugin \u0026ldquo;layer to labeled layer\u0026quot;) e usando a ferramenta do qgis para mover as etiquetas, foi relativamente fácil reposicioná-las de forma a que todas coubessem no mapa sem se sobreporem. Porém, em certos casos, tornou-se difícil perceber a que elemento cada uma correspondia.\nPrecisava de criar \u0026ldquo;linhas de guia\u0026rdquo; que, sempre que necessário, ligassem o elemento e a respectiva etiqueta. Conhecia a existência de outro excelente plugin, chamado “Easy Custom Labeling” do Regis Haubourg, que fazia o que eu pretendia, mas como criava um duplicado da camada original significava que a mesma não seria actualizada quando a camada original fosse editada.\nUma vez que os dados estavam guardados numa base de dados PostgreSQL/Postgis, decidi criar uma consulta que me devolvesse uma camada com as linhas de guia. Usei a seguinte consulta no gestor de bases de dados:\n[code language=\u0026ldquo;SQL\u0026rdquo;] SELECT gid, label, ST_Makeline(St_setSRID(ST_PointOnSurface(geom),27493), St_setSRID(St_Point(x_label::numeric, y_label::numeric),27493)) FROM epvu.sgev WHERE x_label IS NOT NULL AND y_label IS NOT NULL AND NOT ST_Within(ST_Makeline(St_setSRID(ST_PointOnSurface(geom),27493), St_setSRID(St_Point(x_label::numeric, y_label::numeric),27493)),geom))[/code]\nEsta consulta cria uma linha composta pelo centro (interno) do polígono e a coordenada do ponto para a qual a etiqueta foi movida. A última condição da cláusula WHERE garante que a linha só é criada se a coordenada da etiqueta não estiver dentro do polígono.\n\nCom a camada resultante carregada no meu projecto, basta-me mover as etiquetas e gravar a edição da camada original para que a respectiva linha de guia apareça.\n\n","date":"January 12, 2015","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2015-01-12-etiquetas-com-guias-em-qgis-e-postgis-labels-leading-lines-with-qgis-and-postgis/","summary":"Recentemente tive necessidade de colocar etiquetas de texto em elementos com geometrias muito próximas, fazendo com que as mesmas colidissem umas com as outras.\nControlando a posição das etiquetas através dos dados (para configurar rapidamente a camada usei o plugin \u0026ldquo;layer to labeled layer\u0026quot;) e usando a ferramenta do qgis para mover as etiquetas, foi relativamente fácil reposicioná-las de forma a que todas coubessem no mapa sem se sobreporem. Porém, em certos casos, tornou-se difícil perceber a que elemento cada uma correspondia.","tags":null,"title":"Etiquetas com guias em QGIS e Postgis"},{"categories":null,"contents":"No último artigo, tentei mostrar como usei o QGIS 2.6 para criar séries de mapas cuja orientação da folha se adaptasse à forma do elemento do atlas. Esse método é útil quando a escala final dos mapas não é relevante, ou quando os elementos usados no atlas têm uma dimensão muito semelhante, permitindo a adopção de uma escala única. No entanto, quando é necessário manter a mesma escala de impressão dos mapas e os elementos do atlas apresentam diferenças de extensão, é necessário alterar o tamanho da folha. Nesta segunda parte do artigo, tentarei mostrar como cheguei a uma solução para isso.\nComo base usei o mapa criado na 1ª parte do artigo, do qual fiz um duplicado. Para exemplificar o método procurei criar uma série de mapas à escala 1:2.000.000. Uma vez que iria adaptar tanto a altura como a largura da folha aos elementos do atlas, não me precisava de preocupar com a orientação da folha em si e por isso comecei por desactivar as propriedades definidas por dados na opção orientação.\nFiz algumas contas usando a escala, as dimensões do elemento do atlas e as margens definidas anteriormente e e cheguei às seguintes expressões a usar na largura e altura da folha, respectivamente:\n((bounds_width( $atlasgeometry ) / 2000000.0) * 1000.0) * 1.1 + 10 ((bounds_height( $atlasgeometry ) / 2000000.0) * 1000.0) * 1.1 + 30  Passo a explicar. (bounds_width( $atlasgeometry ) / 2000000.0) é a largura do elemento do atlas representado à escala 1:2.000.000 em unidades do projecto (neste caso metros). Este resultado é multiplicado por 1000 para o converter em milímetros (unidade usada nas definições do compositor). Para que o elemento de atlas não ficasse resvés aos limites do mapa decidi dar 10% de margem em torno do mesmo, o que justifica a multiplicação por 1.1. E por fim adicionei a dimensão das margens do mapa que tinham sido definidas na 1ª parte do artigo (i.e., 20 mm, 5 mm, 10 mm, 5 mm).\n\nComo se pode ver pela imagem anterior, após a introdução das expressões nas opções de largura e altura da folha, a sua dimensão já se alterava em função do tamanho do elemento de atlas. No entanto, como seria de esperar, os itens do mapa mantiveram-se teimosamente na mesma posição. Foi por isso necessário alterar as expressões definidas para a dimensão e posição de cada um deles.\nComeçado pelo tamanho do item de mapa, as expressões a usar na altura e largura não foram difíceis de perceber uma vez que seriam as dimensões da folha menos as margens:\n((bounds_width( $atlasgeometry ) / 2000000.0) * 1000.0) * 1.1 ((bounds_height( $atlasgeometry ) / 2000000.0) * 1000.0) * 1.1  \nPara posicionar correctamente os elementos, bastou substituir nas expressões das opções X e Y os \u0026ldquo;CASE WHEN \u0026hellip; THEN \u0026hellip; END\u0026rdquo; que determinavam o tamanho da largura ou altura da folha, pelas expressões descritas anteriormente. Por exemplo, as expressões usadas para a posição da legenda em X e Y:\n(CASE WHEN bounds_width( $atlasgeometry ) \u0026gt;= bounds_height( $atlasgeometry) THEN 297 ELSE 210 END) - 7 (CASE WHEN bounds_width( $atlasgeometry ) \u0026gt;= bounds_height( $atlasgeometry) THEN 210 ELSE 297 END) - 12  Passaram a ser, respectivamente:\n(((bounds_width( $atlasgeometry ) / 2000000.0) * 1000.0) * 1.1 + 10) - 7 (((bounds_height( $atlasgeometry ) / 2000000.0) * 1000.0) * 1.1 + 30) - 12  \nAlterando as expressões de posicionamento X e Y dos restantes itens do compositor cheguei à estrutura final.\n\nDepois disso, a impressão/exportação de todos os (25) mapas ficou, mais uma vez, à distância de um só clique.\n\nUma vez que o QGIS permite exportar imagens do compositor georreferenciadas, adicionando-as ao QGIS obtive este resultado interessante.\n Como se pode ver pelos resultados, através deste método, podemos obter mapas com formatos bastante estranhos. Por essa razão, na 3ª e última parte deste artigo, procurarei mostrar como criar uma série de mapas com escala fixa, mas usando formatos de folhas standard (A4, A3, A2, A1 e A0).\n","date":"November 18, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2014-11-18-series-de-mapas-com-formatos-multiplos-em-qgis-2-6-parte-2-multiple-format-map-series-using-qgis-2-6-part-21/","summary":"No último artigo, tentei mostrar como usei o QGIS 2.6 para criar séries de mapas cuja orientação da folha se adaptasse à forma do elemento do atlas. Esse método é útil quando a escala final dos mapas não é relevante, ou quando os elementos usados no atlas têm uma dimensão muito semelhante, permitindo a adopção de uma escala única. No entanto, quando é necessário manter a mesma escala de impressão dos mapas e os elementos do atlas apresentam diferenças de extensão, é necessário alterar o tamanho da folha.","tags":null,"title":"Séries de mapas com formatos múltiplos em QGIS 2.6 – Parte 2"},{"categories":null,"contents":"Para não variar, a nova versão do QGIS (o QGIS 2.6 Brigthon) traz um conjunto alargado de novas funcionalidades que permitem ao utilizador fazer mais, melhor e mais rápido do que com a versão anterior. Uma das novidades desta versão é a possibilidade de controlar algumas propriedades dos itens do compositor através de dados (por exemplo, o tamanho e a posição). Algo que abre a porta a aplicações bastante interessantes. Nos próximos artigos, proponho-me a mostrar como criar séries de mapas com multiplos formatos.\nNeste primeiro artigo, o objectivo é que, mantendo o tamanho da folha, o mapa seja criado com a orientação (paisagem ou retrato) que melhor se adapte à forma do elemento do atlas. Para exemplificar, usei a amostra de dados do Alaska para criar um mapa de cada uma das regiões do Alaska.\nEm primeiro lugar comecei por criar o meu layout numa dos formatos, colocando vários itens nas posições que desejava.\n\nPara controlar a orientação da folha através do atlas, fui ao separador \u0026ldquo;Composição\u0026rdquo; e na opção orientação, usei no botão propriedades definidos por dados a seguinte expressão:\nCASE WHEN bounds_width( $atlasgeometry ) \u0026gt;= bounds_height( $atlasgeometry ) THEN 'landscape' ELSE 'portrait' END  Usando a opção de pré-visualização do atlas, podemos verificar que a orientação da folha já muda de acordo com a forma do elemento do atlas. No entanto, os itens não acompanham essa mudança e alguns ficam até fora da área de impressão.\n\nPara controlar o tamanho e posição dos itens do mapa tive em consideração o tamanho de uma folha A4 (297 x 210 mm), as dimensões das margens do mapa ( 20 mm, 5 mm, 10 mm, 5 mm) e os pontos de referência dos itens.\nNo caso do item \u0026ldquo;mapa\u0026rdquo;, usando como ponto de referência o canto superior esquerdo, foi necessário alterar a sua altura e largura. Sabia que a altura do item era é subtracção do tamanho das margens superiores e inferiores (30 mm) da altura folha por isso a expressão a usar foi:\n(CASE WHEN bounds_width( $atlasgeometry ) \u0026gt;= bounds_height( $atlasgeometry) THEN 297 ELSE 210 END) - 30  De forma análoga, a expressão a usar para a largura foi:\n(CASE WHEN bounds_width( $atlasgeometry ) \u0026gt;= bounds_height( $atlasgeometry) THEN 210 ELSE 297 END) - 10  \nOs restantes itens ocupavam sempre uma posição relativa na folha sem que fosse necessário alterar o seu tamanho e por isso tinha apenas de controlar a sua posição. Por exemplo, o título encontrava-se centrado no topo da folha, e portanto, usando como ponto de referência o topo-centro, bastou definir a seguinte expressão para a posição X:\n\n(CASE WHEN bounds_width( $atlasgeometry ) \u0026gt;= bounds_height( $atlasgeometry) THEN 297 ELSE 210 END) / 2.0  \nJá a legenda exige alterar a posição em X e em Y. Usando como ponto de referência o canto inferior direito, a expressão para a posição em X foi:\n(CASE WHEN bounds_width( $atlasgeometry ) \u0026gt;= bounds_height( $atlasgeometry) THEN 297 ELSE 210 END) - 7  E para a posição em Y:\n(CASE WHEN bounds_width( $atlasgeometry ) \u0026gt;= bounds_height( $atlasgeometry) THEN 210 ELSE 297 END) - 12  \nPara os restantes itens (rosa dos ventos, escala gráfica e texto no canto inferior esquerdo), as expressões a usar eram em tudo similares às já apresentadas, e, após definidas em cada um dos itens, fiquei com o layout preparado para se adaptar às duas orientações da folha.\n\nDepois disso, a impressão/exportação de todos os (25) mapas ficou à distância de um só clique.\n\nNo próximo artigo da série, procurarei explicar como criar séries de mapas em que seja o tamanho da folha a adaptar-se de forma a manter uma escala constante.\n","date":"November 9, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2014-11-09-series-de-mapas-com-formatos-multiplos-em-qgis-2-6-parte-1-multiple-format-map-series-using-qgis-2-6-part-1/","summary":"Para não variar, a nova versão do QGIS (o QGIS 2.6 Brigthon) traz um conjunto alargado de novas funcionalidades que permitem ao utilizador fazer mais, melhor e mais rápido do que com a versão anterior. Uma das novidades desta versão é a possibilidade de controlar algumas propriedades dos itens do compositor através de dados (por exemplo, o tamanho e a posição). Algo que abre a porta a aplicações bastante interessantes. Nos próximos artigos, proponho-me a mostrar como criar séries de mapas com multiplos formatos.","tags":["atlas","Cartografia","Compositor","QGIS"],"title":"Séries de mapas com formatos múltiplos em QGIS 2.6 - Parte 1"},{"categories":null,"contents":"\nEm altura de testes à versão em desenvolvimento do QGIS (versão master), dá jeito ter também instalada a última versão estável do QGIS. Em windows isso não representa um problema, uma vez que se podem instalar várias versões do QGIS em paralelo (tanto via Osgeo4w como standalone). Em linux, o processo não é tão directo pelo facto da instalação se realizar por obtenção de diversos pacotes disponíveis nos repositórios, não sendo por isso possível instalar mais do que uma versão sem que se originem quebras de dependências. Assim, instalando a versão estável através dos repositórios, as alternativas para instalação da versão em desenvolvimento são:\n * Compilar o QGIS master do código fonte; * Instalar o QGIS master num docker; * Instalar o QGIS master numa máquina virtual;  Neste artigo vou mostrar como compilar o código fonte em Ubuntu 14.04. Afinal não é tão difícil quanto parece. Meia dúzia de comandos e um pouco de paciência e vai-se lá. Usei como base as indicações do ficheiro INSTALL.TXT disponível no código fonte com umas pequenas alterações.\nInstalar todas as dependências necessárias\nNum terminal correr o seguinte comando para instalar todas as dependências e ferramentas necessárias à compilação do QGIS. (adicionei o ccmake e o git ao comando original)\nsudo apt-get install bison cmake doxygen flex git graphviz grass-dev libexpat1-dev libfcgi-dev libgdal-dev libgeos-dev libgsl0-dev libopenscenegraph-dev libosgearth-dev libpq-dev libproj-dev libqscintilla2-dev libqt4-dev libqt4-opengl-dev libqtwebkit-dev libqwt5-qt4-dev libspatialindex-dev libspatialite-dev libsqlite3-dev lighttpd pkg-config poppler-utils pyqt4-dev-tools python-all python-all-dev python-qt4 python-qt4-dev python-sip python-sip-dev spawn-fcgi txt2tags xauth xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable xvfb cmake-curses-gui  Configurar o ccache Este passo permite optimizar a compilação e tornar a compilação mais rápida nas próximas vezes que se fizer:\ncd /usr/local/bin sudo ln -s /usr/bin/ccache gcc sudo ln -s /usr/bin/ccache g++  Obter o código fonte do Github O código fonte pode ser colocado numa pasta à escolha de cada um. Seguindo a sugestão do ficheiro de instruções acabei por colocar tudo na minha pasta home/alexandre/dev/cpp.\nmkdir -p ${HOME}/dev/cpp cd ${HOME}/dev/cpp  Já dentro da pasta home/alexandre/dev/cpp, podemos obter o código do qgis executando o seguinte comando git:\ngit clone git://github.com/qgis/QGIS.git  Nota: Se pretendesse fazer alterações ao código e experimentar se funcionava, então deveria fazer o clone do fork do qgis do meu próprio repositório, ou seja:\ngit clone https://github.com/SrNetoChan/Quantum-GIS  Preparar directorias de compilação e instalação O código fonte tem de ser compilado e instalado em locais próprios para evitar conflitos com outras versões do QGIS. Por isso, há que criar uma pasta para efectuar a instalação:\nmkdir -p ${HOME}/apps  E outra onde será feita a compilação:\ncd QGIS mkdir build-master cd build-master  Configuração Já na pasta build-master damos início ao processo de compilação. O primeiro passo é a configuração, onde vamos dizer onde queremos instalar o QGIS master. Para isso executamos o seguinte comando (não esquecer os dois pontos):\nccmake ..  Na configuração é necessário alterar o valor do CMAKE_INSTALL_PREFIX que define onde vai ser feita a instalação, no meu caso usei a pasta já criada \u0026lsquo;home/alexandre/apps\u0026rsquo; . Para editar o valor há que mover o cursor até à linha em causa e carregar em [enter], depois de editar, volta-se a carregar em [enter]. Depois há que carregar em [c] para refazer a configuração e depois em \u0026lsquo;g\u0026rsquo; para gerar a configuração.\n\nCompilação e instalação Já com tudo configurado resta compilar o código e depois instalá-lo:\nmake sudo make install  Nota: Estes dois passos podem demorar um bocadinho, principalmente na primeira vez que o código for compilado.\nDepois de instalado podemos correr o QGIS master a partir da pasta de instalação:\ncd ${HOME}/apps/bin/ export LD_LIBRARY_PATH=/home/alexandre/apps/lib export QGIS_PREFIX_PATH=/home/alexandre/apps ${HOME}/apps/bin/qgis  Para se tornar mais cómodo, podemos colocar os últimos 3 comandos num ficheiro .sh e gravá-lo num local acessível (desktop ou home) para executarmos o qgis sempre que necessário.\nUPDATE: Actualizar a versão master Como já foi referido num comentário, a versão em desenvolvimento está constantemente a ser alterada, por isso para testar se determinados bugs foram entretanto corrigidos há que a actualizar. Trata-se de um processo bastante simples. O primeiro passo é actualizar o código fonte:\ncd ${HOME}/dev/cpp/qgis git pull origin master  E depois é voltar a correr a compilação (que desta feita será mais rápida):\ncd build-master ccmake .. make sudo make install  ","date":"October 8, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2014-10-08-instalar-duas-versoes-de-qgis-em-linux/","summary":"Em altura de testes à versão em desenvolvimento do QGIS (versão master), dá jeito ter também instalada a última versão estável do QGIS. Em windows isso não representa um problema, uma vez que se podem instalar várias versões do QGIS em paralelo (tanto via Osgeo4w como standalone). Em linux, o processo não é tão directo pelo facto da instalação se realizar por obtenção de diversos pacotes disponíveis nos repositórios, não sendo por isso possível instalar mais do que uma versão sem que se originem quebras de dependências.","tags":["linux","master","QGIS"],"title":"Instalar duas versões de QGIS em Linux"},{"categories":null,"contents":"O desafio Em tempos na lista de discussão do qgis-pt alguém perguntou como dispor as coordenadas dos cantos do mapa no QGIS. Não estando (ainda) disponível tal funcionalidade, tentei chegar sem sucesso a uma solução que fosse de certa forma automática. Depois de remoer a ideia, e de ler um artigo do Nathan Woodrow, achei que a solução poderia passar por criar uma função para o construtor de expressões que pudesse ser usada em etiquetas no mapa.\nA solução Seguindo as indicações do referido artigo, comecei por criar um ficheiro userfunctions.py, que gravei na pasta **.qgis2/python **e, com uma ajuda do Nyall Dawson, escrevi o seguinte código.\n[code language=\u0026ldquo;Python\u0026rdquo;] from qgis.utils import qgsfunction, iface from qgis.core import QGis\n@qgsfunction(2,\u0026ldquo;python\u0026rdquo;) def map_x_min(values, feature, parent): \u0026quot;\u0026quot;\u0026quot; Returns the minimum x coordinate of a map from a specific composer. \u0026quot;\u0026quot;\u0026quot; composer_title = values[0] map_id = values[1] composers = iface.activeComposers() for composer_view in composers(): composer_window = composer_view.composerWindow() window_title = composer_window.windowTitle() if window_title == composer_title: composition = composer_view.composition() map = composition.getComposerMapById(map_id) if map: extent = map.currentMapExtent() break result = extent.xMinimum() return result [/code]\nDepois de correr o comando import userfunctions na consola python (Módulos \u0026gt; Consola python), já conseguia usar a função map_x_min() (disponível na categoria python) numa expressão para obter o valor mínimo em X.\nBastava então criar as restantes funções map_x_max(), map_y_min() e** map_y_max()**. Como parte do código seria repetida, decidi encapsulá-lo na função map_bound() que recebesse como argumentos o título do compositor de impressão e o id do mapa e me devolvesse a extensão do mesmo (sob a forma de um QgsRectangle).\n[code language=\u0026ldquo;Python\u0026rdquo;] from qgis.utils import qgsfunction, iface from qgis.core import QGis\ndef map_bounds(composer_title, map_id): \u0026quot;\u0026quot;\u0026quot; Returns a rectangle with the bounds of a map from a specific composer \u0026quot;\u0026quot;\u0026quot; composers = iface.activeComposers() for composer_view in composers: composer_window = composer_view.composerWindow() window_title = composer_window.windowTitle() if window_title == composer_title: composition = composer_view.composition() map = composition.getComposerMapById(map_id) if map: extent = map.currentMapExtent() break else: extent = None\nreturn extent[/code]\nCom essa função disponível podia usá-la internamente nas funções para devolver cada um dos mínimos e máximos em X e Y, tornando o código mais compacto e fácil de manter. Adicionei ainda ao código original alguns mecanismos para evitar erros.\n[code language=\u0026ldquo;Python\u0026rdquo;] @qgsfunction(2,\u0026ldquo;python\u0026rdquo;) def map_x_min(values, feature, parent): \u0026quot;\u0026quot;\u0026quot; Returns the minimum x coordinate of a map from a specific composer. Calculations are in the Spatial Reference System of the project.\nSyntax map_x_min(composer_title, map_id) Arguments composer_title - is string. The title of the composer where the map is. map_id - integer. The id of the map. Example map_x_min('my pretty map', 0) - -12345.679 \u0026quot;\u0026quot;\u0026quot; composer_title = values[0] map_id = values[1] map_extent = map_bounds(composer_title, map_id) if map_extent: result = map_extent.xMinimum() else: result = None\nreturn result\n@qgsfunction(2,\u0026ldquo;python\u0026rdquo;) def map_x_max(values, feature, parent): \u0026quot;\u0026quot;\u0026quot; Returns the maximum x coordinate of a map from a specific composer. Calculations are in the Spatial Reference System of the project.\nSyntax map_x_max(composer_title, map_id) Arguments composer_title - is string. The title of the composer where the map is. map_id - integer. The id of the map. Example map_x_max('my pretty map', 0) - 12345.679 \u0026quot;\u0026quot;\u0026quot; composer_title = values[0] map_id = values[1] map_extent = map_bounds(composer_title, map_id) if map_extent: result = map_extent.xMaximum() else: result = None\nreturn result\n@qgsfunction(2,\u0026ldquo;python\u0026rdquo;) def map_y_min(values, feature, parent): \u0026quot;\u0026quot;\u0026quot; Returns the minimum y coordinate of a map from a specific composer. Calculations are in the Spatial Reference System of the project.\nSyntax map_y_min(composer_title, map_id) Arguments composer_title - is string. The title of the composer where the map is. map_id - integer. The id of the map. Example map_y_min('my pretty map', 0) - -12345.679 \u0026quot;\u0026quot;\u0026quot; composer_title = values[0] map_id = values[1] map_extent = map_bounds(composer_title, map_id) if map_extent: result = map_extent.yMinimum() else: result = None\nreturn result\n@qgsfunction(2,\u0026ldquo;python\u0026rdquo;) def map_y_max(values, feature, parent): \u0026quot;\u0026quot;\u0026quot; Returns the maximum y coordinate of a map from a specific composer. Calculations are in the Spatial Reference System of the project.\nSyntax map_y_max(composer_title, map_id) Arguments composer_title - is string. The title of the composer where the map is. map_id - integer. The id of the map. Example map_y_max('my pretty map', 0) - 12345.679 \u0026quot;\u0026quot;\u0026quot; composer_title = values[0] map_id = values[1] map_extent = map_bounds(composer_title, map_id) if map_extent: result = map_extent.yMaximum() else: result = None\nreturn result[/code]\nAs funções ficaram disponíveis no construtor de expressões na categoria \u0026ldquo;Python\u0026rdquo; (podia ter-lhe dado outro nome qualquer) e as descrições das funções são transformadas em textos de ajuda para fornecer ao utilizador informação de como utilizar as funções.\nUsando as funções recentemente criadas, foi fácil posicionar etiquetas junto dos cantos do mapa com as coordenadas dos mesmos. Qualquer alteração à extensão do mapa, reflecte-se nas etiquetas, podendo por isso ser usadas convenientemente com a funcionalidade de atlas.\n\nO resultado destas funções pode ser usado com outras. Na imagem seguinte apresenta-se uma expressão para apresentar as coordenadas de forma mais compacta.\n\nHavia um senão\u0026hellip; Para as funções ficarem disponíveis, seria necessário importá-las manualmente em cada utilização do QGIS. Algo que não era prático. Novamente com a ajuda do Nathan, fiquei a saber que podemos importar módulos Python no arranque do QGIS colocando na pasta .qgis2/python um ficheiro com o nome startup.py com os comandos de importação. Para o meu caso bastou o seguinte.\n[code language=\u0026ldquo;Python\u0026rdquo;] import userfunctions [/code]\nConclusões Fiquei bastante satisfeito com o resultado. A possibilidade do utilizador criar as usas próprias funções para usar em expressões vem mais uma vez demonstrar como é fácil personalizar e criar as minhas próprias ferramentas para QGIS. Já estou a matutar em mais aplicações para estar fantástica funcionalidade.\n\nOs ficheiros Python com as funções criadas podem ser descarregados AQUI. Basta descompactar os dois ficheiros para a pasta .qgis2/python e reiniciar o QGIS, e as funções devem ficar disponíveis.\n","date":"September 9, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2014-09-09-coordenadas-dos-cantos-do-mapa-em-qgis-map-corner-coordinates-in-qgis/","summary":"O desafio Em tempos na lista de discussão do qgis-pt alguém perguntou como dispor as coordenadas dos cantos do mapa no QGIS. Não estando (ainda) disponível tal funcionalidade, tentei chegar sem sucesso a uma solução que fosse de certa forma automática. Depois de remoer a ideia, e de ler um artigo do Nathan Woodrow, achei que a solução poderia passar por criar uma função para o construtor de expressões que pudesse ser usada em etiquetas no mapa.","tags":["Cartografia","python","QGIS","tutorial"],"title":"Coordenadas dos cantos do mapa em QGIS"},{"categories":null,"contents":"Já não é a primeira vez que vejo pessoas que para seleccionarem elementos pelos valores dos seus atributos, usam expressões como\n[code language=\u0026ldquo;SQL\u0026rdquo;]\u0026ldquo;field\u0026rdquo; = \u0026lsquo;value1\u0026rsquo; OR \u0026ldquo;field\u0026rdquo; = \u0026lsquo;value2\u0026rsquo; OR \u0026ldquo;field\u0026rdquo; = \u0026lsquo;value3\u0026rsquo; [OR \u0026hellip;][/code]\nUma forma mais prática e bonita de o fazer é usar o operador** IN**.\n[code language=\u0026ldquo;SQL\u0026rdquo;]\u0026ldquo;field\u0026rdquo; IN (\u0026lsquo;value1\u0026rsquo;,\u0026lsquo;value2\u0026rsquo;,\u0026lsquo;value3\u0026rsquo;[,\u0026hellip;])[/code]\nEste operador existe em quase todos os softwares SIG que conheço. No QGIS, pode ser usado mesmo quando não existe um botãozinho para clicar.\nNa verdade, trata-se de uma abreviatura do que é usado em SQL, onde o operador é usado na expressão WHERE.\n[code language=\u0026ldquo;SQL\u0026rdquo;] SELECT * FROM parks WHERE \u0026ldquo;tipo\u0026rdquo; IN (\u0026lsquo;PI\u0026rsquo;,\u0026lsquo;CM\u0026rsquo;,\u0026lsquo;PJ\u0026rsquo;); [/code]\n","date":"June 24, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2014-06-24-use-o-operador-in-sff-please-use-the-in-operator/","summary":"Já não é a primeira vez que vejo pessoas que para seleccionarem elementos pelos valores dos seus atributos, usam expressões como\n[code language=\u0026ldquo;SQL\u0026rdquo;]\u0026ldquo;field\u0026rdquo; = \u0026lsquo;value1\u0026rsquo; OR \u0026ldquo;field\u0026rdquo; = \u0026lsquo;value2\u0026rsquo; OR \u0026ldquo;field\u0026rdquo; = \u0026lsquo;value3\u0026rsquo; [OR \u0026hellip;][/code]\nUma forma mais prática e bonita de o fazer é usar o operador** IN**.\n[code language=\u0026ldquo;SQL\u0026rdquo;]\u0026ldquo;field\u0026rdquo; IN (\u0026lsquo;value1\u0026rsquo;,\u0026lsquo;value2\u0026rsquo;,\u0026lsquo;value3\u0026rsquo;[,\u0026hellip;])[/code]\nEste operador existe em quase todos os softwares SIG que conheço. No QGIS, pode ser usado mesmo quando não existe um botãozinho para clicar.","tags":["QGIS","SQL"],"title":"Por favor, use o operador \"IN\""},{"categories":null,"contents":"Inspirado num artigo da Anita Graser, tentei usar o QGIS para criar um mapa de Cascais que tivesse um aspecto antigo, como que se tivesse sido metodicamente desenhado à mão, embora tivesse ligeiramente maltratado.\nDefinir os Estilos Comecei por definir a simbologia para cada um dos elementos a representar.\nEdifícios Para preenchimento dos edifícios tentei usar uma cor que lembrasse os telhados portugueses, e muito usada em mapas antigos de cidades, com um contorno ligeiramente mais escuro do mesma cor.\nPara dar dimensão aos edifícios criei uma sombra por baixo, adicionando um \u0026ldquo;simple fill\u0026rdquo; em tons escuros e usando a opção Offset X,Y. Os valores escolhidos tiveram em conta a direcção predominante das fachadas dos edíficios de forma a que o efeito fosse visível por toda a área do mapa.\n\n[ ](/images/2014/04/capturar_6.png)\nEspaços verdes Para espaços verdes, usei 3 camadas de simbologia. Uma base com o preenchimento a verde. Uma segunda camada com um contorno grosso ligeiramente mais escuro, e com uma funcionalidade que surgiu na versão 2.2 e que permite mostrar as linhas de contorno apenas no interior do polígono. Para tal é necessário escolher o tipo \u0026ldquo;outline: simple line\u0026rdquo; e seleccionar a opção \u0026ldquo;draw line only inside polygon\u0026rdquo;.\n\n.A última camada de simbologia é uma linha fina num verde mais escuro que as restantes.\n\nO Mar Para o mar usei a mesma técnica que para os espaços verdes, mas em tons de azul e com o contorno do meio mais exagerado.\n\nEstradas Para símbolo das estradas usei uma linha grossa com um tom pastel alaranjado. Criei também etiquetas dos nomes das ruas ao longo das linhas usando uma fonte script (no meu caso o Pristina Bold). Para melhorar a legibilidade adicionei um pequeno buffer branco com 50% de transparência.\n\n\nPraia Nas praias, para além da base, usei um point pattern fill, com um círculo bastante pequeno.\n\nComposição do mapa Embora o aspecto do mapa não esteja muito longe do resultado final, é no Print Composer que se dão os toques finais. Em primeiro lugar, comecei por preencher toda a folha com a imagem de uma textura de papel antigo (aliás, o mesmo usado pela Anita no seu artigo). Para o efeito não ficar demasiado pesado, apliquei uma transparência de 20% à imagem.\n\nDepois adiciona-se o mapa propriamente dito e nas suas propriedades alteramos o modo de rendering de \u0026ldquo;normal\u0026rdquo; (usado por defeito) para \u0026ldquo;multiply\u0026rdquo;. Desta forma parece que o mapa foi desenhado directamente sobre o papel antigo.\n\nDepois é uma questão de adicionar mais umas etiquetas (nomes de praias e locais), uma rosa dos ventos e uma escala gráfica (usando sempre o modo de rendering \u0026ldquo;multiply\u0026rdquo; para parecer que foi desenhado por cima da folha), e\u0026hellip; Voilá, temos mapa!\n\n","date":"April 14, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2014-04-14-mapa-envelhecido-aged-map/","summary":"Inspirado num artigo da Anita Graser, tentei usar o QGIS para criar um mapa de Cascais que tivesse um aspecto antigo, como que se tivesse sido metodicamente desenhado à mão, embora tivesse ligeiramente maltratado.\nDefinir os Estilos Comecei por definir a simbologia para cada um dos elementos a representar.\nEdifícios Para preenchimento dos edifícios tentei usar uma cor que lembrasse os telhados portugueses, e muito usada em mapas antigos de cidades, com um contorno ligeiramente mais escuro do mesma cor.","tags":["QGIS"],"title":"Old map in QGIS"},{"categories":null,"contents":"O módulo (plugin) para QGIS Multipart Spliticon permite, durante a edição, separar elementos multipartes seleccionados transformando-os em elementos simples. Ao contrário da funcionalidade “Multipartes para partes simples” do menu Vector \u0026gt; Ferramentas de Geometria, o plugin permite separar apenas os elementos seleccionados, e não necessita de criar novos ficheiros.\nInstalação O plugin está disponível no repositório oficial do QGIS, portanto a sua instalação pode ser feita através do instalador de módulos python (Módulos \u0026gt; Gerir e instalar módulos…).\nUtilização Estando seleccionada uma camada vectorial em modo de edição (Camada \u0026gt; Alternar edição), seleccione todos os elementos que pretende separar e carregue no ícone do plugin que está disponível na barra de ferramentas “Vectorização Avançada” (Ver \u0026gt; Barras de Ferramentas \u0026gt; Vectorização Avançada) ou em Editar \u0026gt; Separar Partes do(s) elementos. No final do processo, uma mensagem no topo do mapa informa o resultado do processo. (Note que o ícone apenas fica activo se seleccionar uma camada em modo de edição, com pelo menos um elemento seleccionado)\nPágina: http://plugins.qgis.org/plugins/splitmultipart/\nRepositório: https://github.com/SrNetoChan/MultipartSplit\n","date":"March 25, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/plugins/multipart-split/","summary":"O módulo (plugin) para QGIS Multipart Spliticon permite, durante a edição, separar elementos multipartes seleccionados transformando-os em elementos simples. Ao contrário da funcionalidade “Multipartes para partes simples” do menu Vector \u0026gt; Ferramentas de Geometria, o plugin permite separar apenas os elementos seleccionados, e não necessita de criar novos ficheiros.\nInstalação O plugin está disponível no repositório oficial do QGIS, portanto a sua instalação pode ser feita através do instalador de módulos python (Módulos \u0026gt; Gerir e instalar módulos…).","tags":null,"title":"Multipart Split"},{"categories":null,"contents":"Finalmente \u0026ldquo;terminei\u0026rdquo; o meu novo plugin. Coloquei o termo entre aspas porque creio que ainda há espaço para alguma melhorias. Este plugin surgiu da necessidade de estimar o tempo de percurso das pequenas e grandes rotas de cascais, e começou como um pequeno script em python. Depois decidi criar um interface gráfico e publicá-lo como plugin porque talvez seja útil a mais pessoas.\n\nO Walking time é um plugin python para QGIS que usa a Tobbler\u0026rsquo;s hiking function para estimar o tempo de percurso ao longo de uma linha consoante o declive.\nOs dados de input necessários são uma camada vectorial de linhas e uma camada raster com valores de elevação (1). É possível ajustar a velocidade base (em terreno plano) de acordo com o tipo de caminhada ou caminhante. Por defeito, o valor usado é de 5 km\\h (2). O plugin actualiza ou cria campos com o tempo estimado em minutos, no sentido directo e no sentido inverso (3). É possível correr o plugin para todos os elementos da camada vectorial, ou apenas nos percursos seleccionados (4).\nO plugin pode também ser usado para preparar uma rede (grafo) para realizar análise de redes onde se queira usar como custo o tempo de percurso.\n\nRepositório QGIS: http://plugins.qgis.org/plugins/walkingtime/\nCódigo: https://github.com/SrNetoChan/WalkingTime\nReportar bugs | Bug report:https://github.com/SrNetoChan/WalkingTime/issues\n","date":"March 25, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/news/2014-03-25-novo-plugin-qgis-new-qgis-plugin-walking-time/","summary":"Finalmente \u0026ldquo;terminei\u0026rdquo; o meu novo plugin. Coloquei o termo entre aspas porque creio que ainda há espaço para alguma melhorias. Este plugin surgiu da necessidade de estimar o tempo de percurso das pequenas e grandes rotas de cascais, e começou como um pequeno script em python. Depois decidi criar um interface gráfico e publicá-lo como plugin porque talvez seja útil a mais pessoas.\n\nO Walking time é um plugin python para QGIS que usa a Tobbler\u0026rsquo;s hiking function para estimar o tempo de percurso ao longo de uma linha consoante o declive.","tags":null,"title":"Novo plugin QGIS \"Walking time\""},{"categories":null,"contents":"O Walking time é um plugin python para QGIS que usa a Tobbler’s hiking function para estimar o tempo de percurso ao longo de uma linha consoante o declive.\nOs dados de input necessários são uma camada vectorial de linhas e uma camada raster com valores de elevação (1). É possível ajustar a velocidade base (em terreno plano) de acordo com o tipo de caminhada ou caminhante. Por defeito, o valor usado é de 5 kmh (2). O plugin actualiza ou cria campos com o tempo estimado em minutos, no sentido directo e no sentido inverso (3). É possível correr o plugin para todos os elementos da camada vectorial, ou apenas nos percursos seleccionados (4).\nO plugin pode também ser usado para preparar uma rede (grafo) para realizar análise de redes onde se queira usar como custo o tempo de percurso.\nCaptura de tela 2014-03-24 12.12.17-01\nRepositório QGIS: http://plugins.qgis.org/plugins/walkingtime/\nCódigo: https://github.com/SrNetoChan/WalkingTime\nReportar bugs: https://github.com/SrNetoChan/WalkingTime/issues\nInstalação O plugin está disponível no repositório oficial de plugins do qgis. Ou seja, basta ir a módulos \u0026gt; gerir e instalar módulos e procurar por “Walking Time”. No entanto, como o plugin é experimental, poderá terá de activar no separador configurações a opção Mostrar também módulos experimentais.\n","date":"March 25, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/plugins/walking-time/","summary":"O Walking time é um plugin python para QGIS que usa a Tobbler’s hiking function para estimar o tempo de percurso ao longo de uma linha consoante o declive.\nOs dados de input necessários são uma camada vectorial de linhas e uma camada raster com valores de elevação (1). É possível ajustar a velocidade base (em terreno plano) de acordo com o tipo de caminhada ou caminhante. Por defeito, o valor usado é de 5 kmh (2).","tags":null,"title":"Walking time"},{"categories":null,"contents":"Hoje surgiu a questão \u0026ldquo;Como consigo fazer um mapa em que a sobreposição de símbolos aumente a opacidade?\u0026rdquo;. Fiz o meu melhor para descrever como fazê-lo em QGIS, que transcrevo agora para português.\nEste tipo de mapas pode ser feito em QGISs usando a uma combinação da transparência e cor dos símbolos e o blending mode dos elementos.\nNote-se a diferença entre a transparência e blending mode da camada (que é aplicado a toda a camada) e a transparência do símbolo e blending dos elementos (que acumulam com outros elementos da mesma camada).\nEsta opções estão disponíveis em Propriedades da camada \u0026gt; Estilo.\n\nCom um valor de transparência do símbolo de 95%, a cor do elemento tornar-se à totalmente opaca quando pelo menos 20 elementos de sobrepuserem. Este número é limitado à sobreposição de 100 elementos(tranparencia 99%).\nUsando diferentes modos de blending (como a multiplicação ou a adição) consegues-se obter outros efeitos.\n\nDuplicando a camada, usando diferentes cores (no exemplo abaixo o verde para uma camada e o vermelho para a imediatamente baixo) e usando blending mode dogde,consegue-se obter efeitos ainda mais interessantes.\n\n","date":"January 15, 2014","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2014-01-15-mapas-de-fluxos-em-qgis/","summary":"Hoje surgiu a questão \u0026ldquo;Como consigo fazer um mapa em que a sobreposição de símbolos aumente a opacidade?\u0026rdquo;. Fiz o meu melhor para descrever como fazê-lo em QGIS, que transcrevo agora para português.\nEste tipo de mapas pode ser feito em QGISs usando a uma combinação da transparência e cor dos símbolos e o blending mode dos elementos.\nNote-se a diferença entre a transparência e blending mode da camada (que é aplicado a toda a camada) e a transparência do símbolo e blending dos elementos (que acumulam com outros elementos da mesma camada).","tags":["QGIS"],"title":"Mapas de fluxos em QGIS"},{"categories":null,"contents":"Quando através de uma consulta SQL a uma base de dados postgres\\postgis se procede a uma agregação (através do uso da cláusula GROUP BY) é quase certo perder a chave primária da tabela original (geralmente o gid). No entanto, para visualizar o resultado de consultas SQL em QGIS é necessário que exista um campo com valores inteiros distintos para usar como identificadores únicos. Assim, para ultrapassar este contratempo, há que criar uma coluna com essas características.\nEssa coluna pode ser feita usando a função ROW_NUMBER(), da seguinte forma:\n[code language=\u0026ldquo;SQL\u0026rdquo;] WITH r as (SELECT campo1, (ST_Dump(ST_Union(t.geom))).geom as geom FROM tabela_1 as t GROUP BY campo1) SELECT ROW_NUMBER() OVER() as id, r.* FROM r; [/code]\nCopiando toda para a expressão na janela SQL do DB Manager (Base de dados \u0026gt; Gestor BD \u0026gt; Janela SQL), é possível usar o campo id como identificador único.\n\n\n","date":"December 22, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2013-12-22-qgis-postgis-consultas-de-agregacao/","summary":"Quando através de uma consulta SQL a uma base de dados postgres\\postgis se procede a uma agregação (através do uso da cláusula GROUP BY) é quase certo perder a chave primária da tabela original (geralmente o gid). No entanto, para visualizar o resultado de consultas SQL em QGIS é necessário que exista um campo com valores inteiros distintos para usar como identificadores únicos. Assim, para ultrapassar este contratempo, há que criar uma coluna com essas características.","tags":null,"title":"QGIS + Postgis: Consultas de agregação "},{"categories":null,"contents":"Trata-se de um cenário muito recorrente em análise espacial. Tendo uma camada\\tabela composta por diversos polígonos, queremos \u0026ldquo;juntá-los\u0026rdquo; de acordo com valores distintos de um ou mais atributos (exemplo: de uma camada com os limites de freguesias, queremos obter os concelhos, ou, da COS ao 3º nível, obter o 2º ou o 1º)\nEste artigo tem como objectivo mostrar como fazê-lo em Postgres\\Postgis.\nTabela de exemplo Como exemplo vou usar uma tabela como o seguinte formato:\n[code language=\u0026ldquo;SQL\u0026rdquo;] CREATE TABLE tabela_1 (gid serial PRIMARY KEY, campo1 character varying(128), campo2 integer, geom geometry(MultiPolygon,27493); [/code]\n\n\nDissolver todos os polígonos Em primeiro lugar podemos simplesmente agregar todos os elementos num multi-polígono único. Para tal usamos a função ST_Union().\n[code language=\u0026ldquo;SQL\u0026rdquo;] SELECT ST_Union(t.geom) as geom FROM tabela_1 as t; [/code]\n\nSeparar polígonos que não sejam contíguos Se por outro lado não quisermos que o resultado apresente multi-polígonos usamos a função ST_Dump() recolhendo o campo da geometria.\n[code language=\u0026ldquo;SQL\u0026rdquo;] SELECT (ST_Dump(ST_Union(t.geom))).geom as geom FROM tabela_1 as t; [/code]\n\nDissolver polígonos com base em valores dos campos Se quisermos dissolver os polígonos que tenham valores iguais num ou mais campos, basta incluí-los na cláusula GROUP BY. Se quisermos que esses campos apareçam no resultado (geralmente queremos) há que referi-los no início do SELECT.\n[code language=\u0026ldquo;SQL\u0026rdquo;] SELECT campo1, campo2, (ST_Dump(ST_Union(t.geom))).geom as geom FROM tabela_1 as t GROUP BY campo1, campo2; [/code]\n\nNota 1: Para quem prefere usar interfaces gráficos, preencher formulários e clicar em botões, o uso de SQL para fazer este tipo de operações pode parecer demasiado complicado e até um pouco retrógrado. Mas uma coisa garanto, com alguma prática as dificuldades iniciais são ultrapassadas e os benefícios que se retiram deste tipo de abordagem são muito recompensadores.\nNota 2: Visualizar o resultado deste tipos consultas de agregação (que usam a cláusula GROUP BY) no QGIS pode ser desafiante, este artigo explica como ultrapassar essa dificuldade.\n","date":"December 20, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2013-12-20-dissolver-poligonos-em-postgrespostgis/","summary":"Trata-se de um cenário muito recorrente em análise espacial. Tendo uma camada\\tabela composta por diversos polígonos, queremos \u0026ldquo;juntá-los\u0026rdquo; de acordo com valores distintos de um ou mais atributos (exemplo: de uma camada com os limites de freguesias, queremos obter os concelhos, ou, da COS ao 3º nível, obter o 2º ou o 1º)\nEste artigo tem como objectivo mostrar como fazê-lo em Postgres\\Postgis.\nTabela de exemplo Como exemplo vou usar uma tabela como o seguinte formato:","tags":["Postgis"],"title":"Dissolver polígonos em Postgres\\Postgis"},{"categories":null,"contents":"Há já algum tempo que queria estudar a funcionalidade de triggers em PostgreSQL. A grosso modo, tinha ideia que permitiam executar comandos de forma automática, sempre que se alterasse determinada tabela, mas desconhecia os mecanismos para o fazer. Uma das aplicações que me veio à ideia foi a de usar triggers para manter actualizado atributos geométricos como a área ou o comprimento. Quando editamos de elementos que contêm atributos relacionados com as dimensões, forma ou localização das suas geometrias (área, perímetro, comprimento), é muito fácil esquecermo-nos de os actualizar depois da edição. Se mais tarde usarmos esses atributos para realizar alguma análise, este esquecimento pode levar a resultados errados.Como exemplo, vou criar um trigger para actualizar os atributos \u0026ldquo;área\u0026rdquo;, \u0026ldquo;latitude\u0026rdquo; e \u0026ldquo;longitude\u0026rdquo; de uma tabela de polígonos.A primeira coisa a fazer é criar uma função que execute o que pretendemos. No caso em questão, usei a seguinte:\nCREATE OR REPLACE FUNCTION update_geometry_fields() RETURNS trigger; $BODY$ DECLARE lat_long TEXT; BEGIN -- Cálculo da área da geometria NEW.area = st_area(NEW.geom); -- Cálculo da latitude e longitude do centroíde da geometria em graus minutos e segundos lat_long := ST_AsLatLonText(st_transform(st_centroid(NEW.geom), 4326)); NEW.latitude = split_part(lat_long,' ',1); NEW.longitude = split_part(lat_long,' ',2); RETURN NEW; END; $BODY$ LANGUAGE plpgsql VOLATILE  Depois, é necessário criar o trigger que despolete a função:\nCREATE TRIGGER update_epvu_sgev_geom_fields BEFORE INSERT OR UPDATE OF geom ON epvu.sgev FOR EACH ROW EXECUTE PROCEDURE update_geometry_fields();  O trigger, quando lido em inglês, é bastante simples de entender. Antes de inserir uma linha nova, ou actualizar a geometria (geom) de uma linha existente da tabela \u0026ldquo;epvu.sgev\u0026rdquo;, executa a função update_geometry_fields() De notar que a criação do triggers (e respectivas funções) pode ter variações. Em primeiro lugar, os triggers podem ser despoletados antes ou depois de um INSERT, DELETE ou UPDATE numa tabela. Em segundo, podem executar a função sobre toda a tabela ou apenas nas linhas em questão. Para ilustrar estas diferenças, mais um exemplo. Com o objectivo de optimizar a impressão em mapas no QGIS, através da nova funcionalidade de atlas do print composer, criei uma consulta para agregar vários polígonos com base num atributo (\u0026ldquo;codigo\u0026rdquo;) e me determinasse se os multi-polígonos resultantes encaixava melhor numa folha ao alto ou deitado. Na tentativa de tornar o processo mais rápido, pensei em gravar a consulta como tabela mantê-la actualizada sempre que alguma alteração pertinente ocorresse através de um trigger. A função a usar no trigger era pouco mais que a consulta em si:\nCREATE OR REPLACE FUNCTION epvu.refresh_geom_paginas_prestadores() RETURNS trigger AS $BODY$ BEGIN TRUNCATE epvu.geom_paginas_prestadores restart identity; INSERT INTO epvu.geom_paginas_prestadores (codigo, formato, geom) (WITH g as (SELECT (st_union(st_makevalid(geom))) AS geom, codigo FROM epvu.sgev GROUP BY codigo ) SELECT g.codigo, CASE WHEN abs(ST_XMax(g.geom)-ST_XMin(g.geom)) \u0026gt; abs(ST_YMax(g.geom)-ST_YMin(g.geom)) THEN 'Landscape' ELSE 'Portrait' END as formato, st_multi(g.geom) as geom FROM g); RETURN NEW; END; $BODY$ LANGUAGE plpgsql VOLATILE  Neste caso, a função deve ser despoletada sempre que forem feitas alterações à tabela que usada na consulta (epvu.sgev) e que possam alterar os seus resultados. Assim, sempre que haja introdução (INSERT) ou eliminação (DELETE) de registos, ou que sejam alterados (UPDATE) os campos da geometria (geom) e \u0026ldquo;codigo\u0026rdquo;, o trigger executa uma única vez a função descrita acima:\nCREATE TRIGGER actualiza_paginas_update AFTER INSERT OR UPDATE OF geom, codigo OR DELETE ON epvu.sgev FOR EACH STATEMENT  Nota: Depois de alguns teste, cheguei à conclusão que, dado o número reduzido de registos que tinha, era mais rápido usar uma VIEW. Continuo no entanto a achar que, este tipo de triggers podem ser úteis para pre-processar consultas mais exigentes. Para mais informação sobre o uso de triggers, a documentação do PostgreSQL é um excelente ponto de partida.\n","date":"December 3, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2013-12-03-triggers-para-que-vos-quero/","summary":"Há já algum tempo que queria estudar a funcionalidade de triggers em PostgreSQL. A grosso modo, tinha ideia que permitiam executar comandos de forma automática, sempre que se alterasse determinada tabela, mas desconhecia os mecanismos para o fazer. Uma das aplicações que me veio à ideia foi a de usar triggers para manter actualizado atributos geométricos como a área ou o comprimento. Quando editamos de elementos que contêm atributos relacionados com as dimensões, forma ou localização das suas geometrias (área, perímetro, comprimento), é muito fácil esquecermo-nos de os actualizar depois da edição.","tags":["Postgis","trigger"],"title":"Triggers para que vos quero..."},{"categories":null,"contents":"Hoje, ao rever uma camada vectorial de distribuição de fauna com interesse para a conservação com a nossa bióloga de serviço, Sara Saraiva, tive necessidade de corrigir (em todas as linhas de determinado atributo) o nome \u0026ldquo;Aquila fasciatus\u0026rdquo;, substituindo-o por \u0026ldquo;Aquila fasciata\u0026rdquo;.\nDevido à opção tomada na organização dos dados, cada polígono continha uma listagem de espécies que nele ocorrem, e o nome a corrigir encontrava-se no meio da mesma. A correcção teria de ser feita sem alterar os restantes nomes.\n\nTratavam-se de cerca de 80 linhas, e na verdade o termo \u0026ldquo;Aquila fasciatus\u0026rdquo; parecia uma meia dúzia de vezes, podendo ser facilmente substituído manualmente. No entanto, a minha honra geek não me permitia efectuar tal processo repetitivo e interrogava-se: \u0026ldquo;E se fossem mais?\u0026rdquo;.\nTinha portanto de encontrar uma forma de o fazer automaticamente. Precisava de um género de \u0026ldquo;Localizar e substituir\u0026hellip;\u0026rdquo;, funcionalidade muito comum em programas de edição de texto e folhas de calculo, e sabia que o QGIS não me iria deixar ficar mal.\nDepois de alguma pesquisa, a solução foi encontrada na calculadora de campo, usando a função replace().\n\nA expressão é:\nreplace(\u0026quot;campo\u0026quot;,'string_antiga','string_nova')  E o resultado foi o esperado.\n\n","date":"May 29, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2013-05-29-substituir-strings-na-tabela-de-atributos-do-qgis/","summary":"Hoje, ao rever uma camada vectorial de distribuição de fauna com interesse para a conservação com a nossa bióloga de serviço, Sara Saraiva, tive necessidade de corrigir (em todas as linhas de determinado atributo) o nome \u0026ldquo;Aquila fasciatus\u0026rdquo;, substituindo-o por \u0026ldquo;Aquila fasciata\u0026rdquo;.\nDevido à opção tomada na organização dos dados, cada polígono continha uma listagem de espécies que nele ocorrem, e o nome a corrigir encontrava-se no meio da mesma. A correcção teria de ser feita sem alterar os restantes nomes.","tags":["QGIS"],"title":"Substituir strings na tabela de atributos do QGIS"},{"categories":null,"contents":"Felizmente parece que algumas coisas vão mudando no nosso país no que toca ao acesso a dados. A Base Geográfica de Referenciação da Informação (BGRI), que outrora foi paga (e bem paga), está agora disponível a todos até ao nível da subsecção estatística e com um total de 122 variáveis dos censos 2011 (organizados por população residente, população presente, famílias, alojamento e edifícios). A página para download, permite descarregar os dados totais para Portugal, ou por regiões e concelhos.\n\nO zip descarregado contém diversos ficheiros, nomeadamente um shapefile (shp, shx e dbf) com os poligonos das subsecções estatísticas e um ficheiro de texto (csv) contendo os valores das variáveis dos censos 2011 (assim como uma nota explicativa das mesmas).\nA página de ajuda refere que é possível abrir estes dados recorrendo a software open source, como o QGIS ou gvSIG, mas não exemplifica como fazê-lo. A tarefa, embora não seja difícil, obriga a uns quanto passos. Vamos ver quais são.\nAbrir os ficheiros no QGIS Dados geográficos (SHP) Os dados geográficos, ao nível da subsecção estatística, estão guardados no ficheiro ESRI S_hapefile (.shp) que abrimos usando o botão _Adicionar camada vectorial (_ou através do menu camada \u0026gt; adicionar camada \u0026gt; Adicionar camada vectorial\u0026hellip;). Usando o botão pesquisar indique a localização do ficheiro com a extensão \u0026ldquo;.shp\u0026rdquo; (lembre-se que terá de ter opção \u0026ldquo;Todos os Ficheiros\u0026rdquo; ou \u0026ldquo;ESRI Shapefile\u0026rdquo; para que o ficheiros esteja visível). Para evitar problemas com acentos e cedilhas deve escolher uma codificação que suporte os nossos caracteres especiais, nomeadamente o \u0026ldquo;ISO-8859-1\u0026rdquo; ou \u0026ldquo;latin1\u0026rdquo;, que, como podem ver neste link, é essencialmente a mesma coisa)**._**\nDepois de aberto o ficheiro, há que definir o sistema de coordenadas de referência correcto para a camada, que, tal como podemos ver pelos metadados, para portugal continental é o ETRS89/PT-TM06 (EPSG:3763). Isso é feito clicando com botão direito sobre a camada e escolhendo a opção Definir SRC da camada. A forma mais fácil de encontrar o sistema desejado é introduzir o seu código EPSG no campo do filtro.\nDados alfanuméricos (CSV) Os dados alfanuméricos dos censos 2011 são guardados num ficheiro CSV (Comma Separated Values), que não é mais que ficheiros simples de texto em que os valores são separados por vírgulas, ponto-e-vírgulas, ou espaços, e podem ser delimitados, por exemplo, por aspas, e que podem ter ou não uma linha de cabeçalho com os nomes dos campos.\nComo se pode ver no excerto abaixo, no nosso caso os valores são separados por ponto e vírgula, e contêm uma linha de cabeçalho com os nomes dos campos.\nANO;GEO_COD;GEO_COD_DSG;NIVEL;NIVEL_DSG;N_EDIFICIOS_CLASSICOS;N_EDIFICIOS_CLASSICOS_1OU2;... 2011;'PT;PT;1;Total Nacional;3544389;3219791;... 2011;'1;Continente;2;NUT1;3353610;3035969;... 2011;'17;Lisboa;3;NUT2;448957;322603;... 2011;'171;Grande Lisboa;4;NUT3;277387;184975;... ...  Por omissão, o QGIS (através do OGR) lê todos os campos do CSV como sendo do tipo texto (string). No entanto, se quisermos definir explicitamente o tipo de dados de cada campo, podemos usar uma técnica que aprendi com o Hugo Martins. Na mesma pasta, cria-se um ficheiro de texto com o mesmo nome que o csv, mas com a extensão .csvt, e, numa só linha, separado por virgulas e dentro de aspas, especificamos cada um dos tipos de dados dos campos (integer, real, string, date (YYYY-MM-DD), time (HH:MM:SS+nn) e datetime (YYYY-MM-DD HH:MM:SS+nn)).\nPara o caso dos ficheiros da BGRI2011, o ficheiro .csvt será qualquer coisa assim.\n[code language=\u0026ldquo;text\u0026rdquo;]\u0026quot;integer\u0026quot;,\u0026quot;string\u0026quot;,\u0026quot;string\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;string\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;,\u0026quot;integer\u0026quot;[/code]\nPara facilitar, criei um ficheiro csvt com as características necessárias que podem descarregá-lo aqui. (Nota: o nome do ficheiro terá de ser alterado consoante o nível a que descarregaram a informação, e.g., BGRI2011_PT.csvt \u0026ndash;\u0026gt; BGRI2011_1105.csvt.\nDepois de preparado o CSVT e de o colocarmos na mesma pasta que o CSV, podemos abrir o CSV no QGIS. Para isso usamos o botão _Adicionar camada de texto delimitado ****(_ou através do menu camada \u0026gt; adicionar camada \u0026gt; Adicionar camada de texto delimitado\u0026hellip;). Começamos por indicar a localização do ficheiro usando o botão Procurar\u0026hellip;. Mais uma vez, devemos garantir que usamos uma codificação compatível, a ISO-8859-1. Em formato de ficheiro escolhemos Delimitadores personalizados e, como já tínhamos visto anteriormente, seleccionamos a opção _**Ponto e vírgula. **_Seleccionamos a caixa _**Primeiro registo tem nome dos campos e escolhemos Sem geometria **_em Definição de geometria.\nNo final da caixa de diálogo podemos ver uma amostra de como ficará o nosso ficheiro dentro do QGIS. Se repararem no campo GEO_COD todos os valores têm antes um apóstrofe (') - penso que colocado propositadamente para obrigar os valores a serem considerados texto em programas como o Excel ou o Calc - de que nos vamos ter de livrar. Para isso, voltamos às opções de Delimitadores personalizados e na opção Escape colocamos um apóstrofe (') que será ignorado em todos os campos e respectivos valores (felizmente, no nosso caso não existem apóstrofes noutros campos, caso contrário teríamos de editar o ficheiro num editor de texto para os salvaguardar) . A caixa de diálogo com todas as opções necessárias deve parecer-se com a imagem abaixo.\nUnir as tabelas de atributos Agora que temos as duas camadas no QGIS, já só falta relacionar a componente geográfica à alfanumérica. Uma vez que têm ambas um campo em comum isto pode ser feito através de uma união (virtual). Para isso, temos de abrir as propriedades da camada \u0026ldquo;geométrica\u0026rdquo; (botão direito do rato sobre a camada, Propriedades) e, no separador Uniões, adicionar uma nova união clicando no botão . No menu seguinte, é necessário definir a Camada a unir a tabela resultante do CSV, o Campo a unir como \u0026ldquo;GEO_COD\u0026rdquo; e o Campo alvo como \u0026ldquo;BGRI11\u0026rdquo; (contém o código da subsecção estatística). Podemos ainda definir quais os campos do CSV queremos unir, e que prefixo lhe dar. Para tornar a visualização dos dados mais rápida, aconselha-se a seleccionar a opção de memorizar a camada unida em memória virtual.\nFinalizado o processo, a camada com os dados geográficos tem agora novos campos originários do CSV, tantos quantos os escolhidos, e precedidos de um prefixo. No meu caso apenas adicionei um campo N_INDIVIDUOS_RESIDENT e usei o prefixo BGRI11_, como se pode constatar na imagem abaixo.\nAssim, torna-se possível usar os dados dos Censos 2011 para efectuar análise espacial, ou simplesmente para criar mapas.\nNota: Neste exemplo trabalhou-se ao nível da subsecção estatística, mas poderia usar-se outro nível de informação desde que combinasse os campos e se dissolvesse os polígonos de antemão.\nAtualizado em: 13 de Fevereiro de 2016\n","date":"May 7, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2013-05-07-visualizar-dados-dos-censos-2011-com-o-qgis/","summary":"Felizmente parece que algumas coisas vão mudando no nosso país no que toca ao acesso a dados. A Base Geográfica de Referenciação da Informação (BGRI), que outrora foi paga (e bem paga), está agora disponível a todos até ao nível da subsecção estatística e com um total de 122 variáveis dos censos 2011 (organizados por população residente, população presente, famílias, alojamento e edifícios). A página para download, permite descarregar os dados totais para Portugal, ou por regiões e concelhos.","tags":null,"title":"Visualizar dados dos Censos 2011 com o QGIS"},{"categories":null,"contents":"Como está muito bem descrito neste artigo do Duarte Carreira, a criação de catálogos virtuais (vrt) e respectivas pirâmides (overviews) usando o GDAL, permite facilitar e melhorar a performance de visualização de mosaicos de imagens.\nUsando o comando gdalbuildvrt para criar o catálogo virtual, as áreas sem valor (NoData) são, por defeito, substituídas pelo valor 0. Em certos caso, o efeito pode não ser o mais desejável.\ngdalbuildvrt mosaico1.vrt --optfile listadeimagens.txt  \nNo entanto, através dos parâmetros -hidenodata e -srcnonata, é possível definir outros valores para os pixeis sem valor. Por exemplo, no comando seguinte escolhi os valores RGB [255, 255, 255] (branco). E o resultado foi uma imagem com o \u0026ldquo;fundo\u0026rdquo; branco.\ngdalbuildvrt mosaico2.vrt -hidenodata -srcnodata \u0026quot;255 255 255\u0026quot; --optfile listadeimagens.txt  \nSe pretendermos que pixeis sem valor não sejam representados, podemos usar o parâmetro -addalpha, tornando-os transparentes.\ngdalbuildvrt mosaico3.vrt -hidenodata -addalpha --optfile listadeimagens.txt  \n","date":"April 24, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/tutorials/2013-04-24-definir-representacao-de-pixeis-sem-valor-em-mosaicos-de-imagem-vrt/","summary":"Como está muito bem descrito neste artigo do Duarte Carreira, a criação de catálogos virtuais (vrt) e respectivas pirâmides (overviews) usando o GDAL, permite facilitar e melhorar a performance de visualização de mosaicos de imagens.\nUsando o comando gdalbuildvrt para criar o catálogo virtual, as áreas sem valor (NoData) são, por defeito, substituídas pelo valor 0. Em certos caso, o efeito pode não ser o mais desejável.\ngdalbuildvrt mosaico1.vrt --optfile listadeimagens.","tags":["gdal","tutorial"],"title":"Definir a representação de pixeis sem valor em mosaicos de imagens VRT"},{"categories":null,"contents":"É muito comum ouvir pessoas usarem desculpas, por vezes mal fundamentadas, para justificarem o uso de software comercial em detrimento de alternativas open source.\n\u0026ldquo;Não há suporte técnico.\u0026rdquo;\nNão é realmente verdade. Dependendo dos projectos, há geralmente uma forte comunidade sempre pronta a ajudar, quer em termos de implementação, quer na resolução de problemas e bugs. Pela minha experiência, são muitas vezes os próprios programadores a responder a dúvidas e problemas, afinal de contas a eles também lhes interessa corrigir possíveis erros. Para além disso, para os mais inseguros ou para empresas, tal como no ambiente proprietário, existem inúmeras empresas especializadas que disponibilizam serviços de consultadoria, suporte técnico e formação.\n\u0026ldquo;Não faz o que eu preciso.\u0026rdquo;\nBem, isso até pode ser verdade para uma ou outra funcionalidade, mas faz-me logo lembrar a música dos Rolling Stones cuja letra diz \u0026ldquo;You can\u0026rsquo;t always get what you want, But if you try sometimes, yeah, You just might find you get what you need!\u0026rdquo; (tradução livre: \u0026ldquo;Podes não conseguir sempre o que queres, mas se tentares, podes muito bem descobrir que terás o que precisas!\u0026rdquo; ). Pelo menos no que toca ao SIG, a maioria das ferramentas essenciais estão disponíveis, trata-se de uma questão de se pesquisar e de se perguntar. Em caso de funções mais específicas, como não há custos com licenças, se determinado software não fizer exactamente o que se pretende, é muito fácil recorrer-se a outros igualmente livres para resolver o problema. Como o software open source, por norma, respeita formatos standart para dados espaciais, não há sequer necessidade de recorrer à conversão dos dados, uma vez que falam todos a mesma linguagem. Por fim, para empresas, há ainda a possibilidade de contratar um programador que colmate as falhas identificadas.\n\u0026ldquo;Não me consigo habituar, é mais difícil.\u0026quot;\nNinguém disse que a conquista da liberdade é fácil, mas tratar-se mais de uma questão de hábito, do que propriamente de dificuldade de utilização. Durante anos somos instigados a usar certas e determinadas ferramentas, quer porque nas faculdades é o que ensinam, quer porque é relativamente fácil \u0026ldquo;arranjar\u0026rdquo; uma cópia\u0026rdquo;, ou porque são tidas como sendo as mais profissionais. Depois \u0026ldquo;afeiçoamo-nos\u0026rdquo; a elas e sentimo-nos desconfortáveis na sua ausência (um pouco como a droga :-P). Para ajudar a transição existem sempre manuais, cursos, e tutoriais, muitos deles português.\n\u0026ldquo;Não é seguro.\u0026quot;\nÉ por vezes feita alguma campanha no sentido de relacionar o open source com potenciais riscos para os computadores (já o vi numa novela portuguesa\u0026hellip;). Diz-se que podem, por exemplo, conter virus, malware ou spyware. Tendo em conta que o código é aberto, todas as operações executadas pelo programa estão visíveis a todos (com olhos experientes, claro), e qualquer alteração ao código sofre um forte escrutínio por parte dos restantes programadores. Qualquer tentativa, mal intencionada, de incluir operações maliciosas, é rapidamente bloqueada.\n","date":"April 4, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/opinion/2013-04-04-as-queixas-do-costume/","summary":"É muito comum ouvir pessoas usarem desculpas, por vezes mal fundamentadas, para justificarem o uso de software comercial em detrimento de alternativas open source.\n\u0026ldquo;Não há suporte técnico.\u0026rdquo;\nNão é realmente verdade. Dependendo dos projectos, há geralmente uma forte comunidade sempre pronta a ajudar, quer em termos de implementação, quer na resolução de problemas e bugs. Pela minha experiência, são muitas vezes os próprios programadores a responder a dúvidas e problemas, afinal de contas a eles também lhes interessa corrigir possíveis erros.","tags":null,"title":"As queixas do costume"},{"categories":null,"contents":"Durante a minha vida profissional e pessoal tenho trabalhado como muitos softwares diferentes, com todo o tipo de licenças. Grande parte deles seriam proprietários, de código fechado e\\ou comerciais. Então porquê dedicar o meu tempo e aprendizagem \u0026ldquo;exclusivamente\u0026rdquo; ao Open Source?\nSem entrar em pormenores sobre as diferenças entre software aberto (open source) e o software livre (free software), são vários os motivos pelos quais o FOSS (Free and Open Source Software) me interessam.\nO primeiro é obviamente a liberdade. Ser livre de poder usar o software sob qualquer contexto e para qualquer finalidade, sem estar limitado pelos custos inerentes à aquisição de software e\\ou às regras e condições impostas pelo fabricante (como muitos softwares ditos grátis o fazem). O que me permite, por exemplo, familiarizar-me com as suas funcionalidades sem que tenha de recorrer à pirataria, ou, como trabalhador _freelancer, _desenvolver o meu trabalho baseado nas minhas capacidades intelectuais e não nas financeiras.\nEm segundo lugar, o aspecto comunitário e colaborativo. O facto do Open Source ser construído por pessoas e para pessoas, onde o objectivo principal é melhorar as suas funcionalidades (e não o aumentar do número de vendas), e em que cada melhoria introduzida por um indivíduo ou empresa é posteriormente partilhada para benefício de toda a comunidade, evitando a duplicação de esforços e o \u0026ldquo;reinventar a roda\u0026rdquo;. Isto é feito, em parte, através de muito trabalho voluntário e da constante partilha de conhecimentos, quer por parte dos programadores, quer dos utilizadores. Assim, juntos, todos evoluem ao mesmo tempo que o próprio software. Para além disso, todos podem colaborar de alguma forma, seja produzindo código, escrevendo e preparando documentação de apoio, traduzindo-os para outros idiomas ou simplesmente reportando_ bugs_.\nPor fim, os \u0026ldquo;custos\u0026rdquo;. A adopção de sofware open source por parte de empresas (incluindo as públicas), permite focar os seus investimentos na formação dos seus recursos humanos e no eventual (e desejável) patrocínio na criação de novas funcionalidades que realmente necessitem, normalmente por uma porção reduzida do que gastariam na aquisição de software comercial (que geralmente \u0026ldquo;obriga\u0026rdquo; à compra de funcionalidades que podemos nunca vir a usar).\n","date":"March 31, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/opinion/2013-03-31-porque-o-open-source/","summary":"Durante a minha vida profissional e pessoal tenho trabalhado como muitos softwares diferentes, com todo o tipo de licenças. Grande parte deles seriam proprietários, de código fechado e\\ou comerciais. Então porquê dedicar o meu tempo e aprendizagem \u0026ldquo;exclusivamente\u0026rdquo; ao Open Source?\nSem entrar em pormenores sobre as diferenças entre software aberto (open source) e o software livre (free software), são vários os motivos pelos quais o FOSS (Free and Open Source Software) me interessam.","tags":null,"title":"Porquê o Open Source?"},{"categories":null,"contents":"O blog \u0026ldquo;SIG sem grilhetas\u0026rdquo; surge desprovido de qualquer tipo de pretensões grandiosas. O principal objectivo será registar as minhas experiências com software Open Source para resolver desafios relacionados com Sistemas de Informação Geográfica (SIG), análise espacial, cartografia, e tudo o resto que isso possa implicar.\nSeguindo o mesmo princípio de abertura e partilha do Open Source, tenho esperança que estes registos possam ajudar outros que, como eu, se \u0026ldquo;aventurem\u0026rdquo; por este mundo.\nNão será de esperar uma estrutura muito organizada de artigos e tutoriais, visto que prevejo que os mesmos sejam composto por ideias e resolução de problemas avulso, à medida que me forem surgindo os desafios.\nPor fim, não me considero detentor de todo o conhecimento, e portanto poderá haver soluções melhores para os problemas que apresento. Nesse caso agradeço que me elucidem, afinal de contas também estou cá para aprender.\n","date":"March 26, 2013","hero":"/images/default-hero.jpg","permalink":"https://srnetochan.github.io/pt/posts/opinion/2013-03-26-nota-de-abertura/","summary":"O blog \u0026ldquo;SIG sem grilhetas\u0026rdquo; surge desprovido de qualquer tipo de pretensões grandiosas. O principal objectivo será registar as minhas experiências com software Open Source para resolver desafios relacionados com Sistemas de Informação Geográfica (SIG), análise espacial, cartografia, e tudo o resto que isso possa implicar.\nSeguindo o mesmo princípio de abertura e partilha do Open Source, tenho esperança que estes registos possam ajudar outros que, como eu, se \u0026ldquo;aventurem\u0026rdquo; por este mundo.","tags":null,"title":"Nota de abertura"}]